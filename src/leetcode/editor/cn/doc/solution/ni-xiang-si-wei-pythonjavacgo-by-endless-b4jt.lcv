# 方法一：逆向思维+双指针

把问题转换成「从 $\textit{nums}$ 中移除一个**最长**的子数组，使得剩余元素的和为 $x$」。

换句话说，要从 $\textit{nums}$ 中找最长的子数组，其元素和等于 $s-x$，这里 $s$ 为 $\textit{nums}$ 所有元素之和。

这可以用双指针实现，具体原理可以看我的[【同向双指针+简洁模板】](https://www.bilibili.com/video/BV1hd4y1r7Gq/)，看完你就掌握双指针啦~

> 注：我一般把窗口大小不固定的叫做**双指针**，窗口大小固定的叫做**滑动窗口**。

最后答案为 $\textit{nums}$ 的长度减去最长子数组的长度。

* [sol1-Python3]

```py
class Solution:
    def minOperations(self, nums: List[int], x: int) -> int:
        target = sum(nums) - x
        if target < 0: return -1  # 全部移除也无法满足要求
        ans = -1
        left = s = 0
        for right, x in enumerate(nums):
            s += x
            while s > target:  # 缩小子数组长度
                s -= nums[left]
                left += 1
            if s == target:
                ans = max(ans, right - left + 1)
        return -1 if ans < 0 else len(nums) - ans
```

* [sol1-Java]

```java
class Solution {
    public int minOperations(int[] nums, int x) {
        int target = -x;
        for (int num : nums) target += num;
        if (target < 0) return -1; // 全部移除也无法满足要求
        int ans = -1, left = 0, sum = 0, n = nums.length;
        for (int right = 0; right < n; ++right) {
            sum += nums[right];
            while (sum > target) sum -= nums[left++]; // 缩小子数组长度
            if (sum == target) ans = Math.max(ans, right - left + 1);
        }
        return ans < 0 ? -1 : n - ans;
    }
}
```

* [sol1-C++]

```cpp
class Solution {
public:
    int minOperations(vector<int> &nums, int x) {
        int target = accumulate(nums.begin(), nums.end(), 0) - x;
        if (target < 0) return -1; // 全部移除也无法满足要求
        int ans = -1, left = 0, sum = 0, n = nums.size();
        for (int right = 0; right < n; ++right) {
            sum += nums[right];
            while (sum > target) sum -= nums[left++]; // 缩小子数组长度
            if (sum == target) ans = max(ans, right - left + 1);
        }
        return ans < 0 ? -1 : n - ans;
    }
};
```

* [sol1-Go]

```go
func minOperations(nums []int, x int) int {
    target := -x
    for _, x := range nums {
        target += x
    }
    if target < 0 { // 全部移除也无法满足要求
        return -1
    }
    ans, left, sum := -1, 0, 0
    for right, x := range nums {
        sum += x
        for sum > target { // 缩小子数组长度
            sum -= nums[left]
            left++
        }
        if sum == target {
            ans = max(ans, right-left+1)
        }
    }
    if ans < 0 {
        return -1
    }
    return len(nums) - ans
}

func max(a, b int) int { if b > a { return b }; return a }
```

#### 复杂度分析

- 时间复杂度：$O(n)$，其中 $n$ 为 $\textit{nums}$ 的长度。虽然写了个二重循环，但是 `left++` 的执行次数不会超过 $n$ 次，所以总的时间复杂度为 $O(n)$。
- 空间复杂度：$O(1)$，仅用到若干额外变量。

# 方法二：直接双指针

如果要正向计算也是可以的，就是写起来稍微有点麻烦：首先算出最长的元素和不超过 $x$ 的后缀，然后不断枚举前缀长度，另一个指针指向后缀最左元素，答案就是前缀+后缀长度之和的最小值。

* [sol2-Python3]

```py
class Solution:
    def minOperations(self, nums: List[int], x: int) -> int:
        s, n = 0, len(nums)
        right = n
        while right and s + nums[right - 1] <= x:  # 计算最长后缀
            right -= 1
            s += nums[right]
        if right == 0 and s < x: return -1  # 全部移除也无法满足要求
        ans = n - right if s == x else inf
        for left, num in enumerate(nums):
            s += num
            while right < n and s > x:  # 缩小后缀长度
                s -= nums[right]
                right += 1
            if s > x: break  # 缩小失败，说明前缀过长
            if s == x: ans = min(ans, left + 1 + n - right)  # 前缀+后缀长度
        return ans if ans <= n else -1
```

* [sol2-Java]

```java
class Solution {
    public int minOperations(int[] nums, int x) {
        int sum = 0, n = nums.length, right = n;
        while (right > 0 && sum + nums[right - 1] <= x) // 计算最长后缀
            sum += nums[--right];
        if (right == 0 && sum < x) return -1; // 全部移除也无法满足要求
        int ans = sum == x ? n - right : n + 1;
        for (int left = 0; left < n; ++left) {
            sum += nums[left];
            while (right < n && sum > x) // 缩小后缀长度
                sum -= nums[right++];
            if (sum > x) break; // 缩小失败，说明前缀过长
            if (sum == x) ans = Math.min(ans, left + 1 + n - right); // 前缀+后缀长度
        }
        return ans > n ? -1 : ans;
    }
}
```

* [sol2-C++]

```cpp
class Solution {
public:
    int minOperations(vector<int> &nums, int x) {
        int sum = 0, n = nums.size(), right = n;
        while (right > 0 && sum + nums[right - 1] <= x) // 计算最长后缀
            sum += nums[--right];
        if (right == 0 && sum < x) return -1; // 全部移除也无法满足要求
        int ans = sum == x ? n - right : n + 1;
        for (int left = 0; left < n; ++left) {
            sum += nums[left];
            while (right < n && sum > x) // 缩小后缀长度
                sum -= nums[right++];
            if (sum > x) break; // 缩小失败，说明前缀过长
            if (sum == x) ans = min(ans, left + 1 + n - right); // 前缀+后缀长度
        }
        return ans > n ? -1 : ans;
    }
};
```

* [sol2-Go]

```go
func minOperations(nums []int, x int) int {
    s, n := 0, len(nums)
    right := n
    for right > 0 && s+nums[right-1] <= x { // 计算最长后缀
        right--
        s += nums[right]
    }
    if right == 0 && s < x { // 全部移除也无法满足要求
        return -1
    }
    ans := n + 1
    if s == x {
        ans = n - right
    }
    for left, num := range nums {
        s += num
        for ; right < n && s > x; right++ { // 缩小后缀长度
            s -= nums[right]
        }
        if s > x { // 缩小失败，说明前缀过长
            break
        }
        if s == x {
            ans = min(ans, left+1+n-right) // 前缀+后缀长度
        }
    }
    if ans > n {
        return -1
    }
    return ans
}

func min(a, b int) int { if b < a { return b }; return a }
```

#### 复杂度分析

- 时间复杂度：$O(n)$，理由同上。
- 空间复杂度：$O(1)$，仅用到若干额外变量。

#### 相似题目（同向双指针）

- [3. 无重复字符的最长子串](https://leetcode.cn/problems/longest-substring-without-repeating-characters/)，[题解](https://leetcode.cn/problems/longest-substring-without-repeating-characters/solutions/1959540/xia-biao-zong-suan-cuo-qing-kan-zhe-by-e-iaks/)
- [209. 长度最小的子数组](https://leetcode.cn/problems/minimum-size-subarray-sum/)，[题解](https://leetcode.cn/problems/minimum-size-subarray-sum/solutions/1959532/biao-ti-xia-biao-zong-suan-cuo-qing-kan-k81nh/)
- [713. 乘积小于 K 的子数组](https://leetcode.cn/problems/subarray-product-less-than-k/)，[题解](https://leetcode.cn/problems/subarray-product-less-than-k/solutions/1959538/xia-biao-zong-suan-cuo-qing-kan-zhe-by-e-jebq/)
- [2516. 每种字符至少取 K 个](https://leetcode.cn/problems/take-k-of-each-character-from-left-and-right/)，[题解](https://leetcode.cn/problems/take-k-of-each-character-from-left-and-right/solutions/2031995/on-shuang-zhi-zhen-by-endlesscheng-4g9p/)

