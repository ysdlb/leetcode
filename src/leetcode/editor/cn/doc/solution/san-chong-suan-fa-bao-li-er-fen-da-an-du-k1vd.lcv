## 算法一：暴力

看示例 3，$\textit{mat}=[[1,10,10],[1,4,5],[2,3,6]],\ k=7$。假设已经算出了从**前两行**中每行选一个数所有情况，这有 $3\times 3=9$ 个（从 $1+1=2$ 到 $10+5=15$）。把这 $9$ 个数从小到大排序，我们需要考虑其中的第 $8$ 个数和第 $9$ 个数吗？

这是不需要的，因为选第三行的第一个数，与这 $9$ 个数的前 $7$ 个数组成数组，就已经形成了 $7$ 个数组和了，而第 $8$ 个数和第 $9$ 个数不会形成更小的数组和。所以，不需要考虑第 $8$ 个数和第 $9$ 个数。

这样就得到了一个暴力算法：从上到下遍历矩阵的行，假设计算出了前 $i-1$ 行形成的前 $k$ 个最小数组和（记作 $s$），遍历到第 $i$ 行时，把 $s$ 与第 $i$ 行的数两两相加，然后只保留其中最小的 $k$ 个数，作为新的 $s$，然后继续遍历矩阵的下一行，重复该过程。遍历结束后，$s[k-1]$ 就是答案（注意 $k$ 从 $1$ 开始，转成下标要减一）。

* [sol1-Python3]

```py
class Solution:
    def kthSmallest(self, mat: List[List[int]], k: int) -> int:
        a = mat[0][:k]
        for row in mat[1:]:
            a = sorted(x + y for x in a for y in row)[:k]
        return a[-1]
```

* [sol1-Java]

```java
class Solution {
    public int kthSmallest(int[][] mat, int k) {
        var a = new int[]{0};
        for (var row : mat) {
            var b = new int[a.length * row.length];
            int i = 0;
            for (int x : a)
                for (int y : row)
                    b[i++] = x + y;
            Arrays.sort(b);
            if (b.length > k) // 保留最小的 k 个
                b = Arrays.copyOfRange(b, 0, k);
            a = b;
        }
        return a[k - 1];
    }
}
```

* [sol1-C++]

```cpp
class Solution {
public:
    int kthSmallest(vector<vector<int>> &mat, int k) {
        vector<int> a = {0};
        for (auto &row: mat) {
            vector<int> b;
            for (int x: a)
                for (int y: row)
                    b.push_back(x + y);
            sort(b.begin(), b.end());
            if (b.size() > k) // 保留最小的 k 个
                b.resize(k);
            a = move(b);
        }
        return a.back();
    }
};
```

* [sol1-Go]

```go
func kthSmallest(mat [][]int, k int) int {
    a := []int{0}
    for _, row := range mat {
        b := make([]int, 0, len(a)*len(row)) // 预分配空间
        for _, x := range a {
            for _, y := range row {
                b = append(b, x+y)
            }
        }
        sort.Ints(b)
        if len(b) > k { // 保留最小的 k 个
            b = b[:k]
        }
        a = b
    }
    return a[k-1]
}
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(mnk\log (nk))$，其中 $m$ 和 $n$ 分别为 $\textit{mat}$ 的行数和列数。
- 空间复杂度：$\mathcal{O}(nk)$。保存两两相加的结果需要 $\mathcal{O}(nk)$ 的空间。

> 注：在两两相加时，还可以用双指针归并（[88. 合并两个有序数组](https://leetcode.cn/problems/merge-sorted-array/)），继续优化时空复杂度。

## 算法二：二分答案

### 前置知识：二分

详见[【基础算法精讲 04】](https://www.bilibili.com/video/BV1AP41137w7/)。

> **二分答案相当于花费 $\log$ 增加了一个条件。**（指时间复杂度乘上一个 $\log$ 系数。）

### 前置知识：回溯与剪枝

详见【基础算法精讲】的 [#14](https://www.bilibili.com/video/BV1mG4y1A7Gu/)、[#15](https://www.bilibili.com/video/BV1xG4y1F7nC/) 和 [#16](https://www.bilibili.com/video/BV1mY411D7f6/)。下面代码使用的是「枚举选哪个」的回溯套路。

> APP 用户如果无法打开，可以分享到微信。

### 思路

设有 $f(s)$ 个不超过 $s$ 的数组和。由于随着 $s$ 的增大，$f(s)$ 不会减小，有单调性，可以二分。（另外一个前提是 $f(s)$ 的值是连续的，例如不会突然从 $3$ 跳到 $5$。）

二分答案 $s$：

- 如果 $f(s)\ge k$，说明答案至多为 $s$。
- 如果 $f(s)< k$，说明答案至少为 $s+1$。
- 二分结束后，设答案为 $s$，那么 $f(s-1)<k$ 且 $f(s)\ge k$。由于 $f(s)$ 的值是连续的，必然有 $f(s-1)=k-1$ 且 $f(s)= k$。

如何计算 $f(s)$？

直接用回溯来计算。统计不超过 $s$ 的数组和的个数，一旦个数等于 $k$，就停止回溯，不再继续递归。

### 二分的细节

设 $S_l$ 为 $\textit{mat}$ 第一列的元素和，$S_r$ 为 $\textit{mat}$ 最后一列的元素和。

那么有 $f(S_r)\ge k$。但 $f(S_l)$ 与 $k$ 的大小关系是未知的。

所以二分的范围为闭区间 $[S_l,S_r-1]$，或者说开区间 $(S_l-1,S_r)$。

> 请注意，区间的定义是：尚未确定 $f(s)$ 与 $k$ 的大小关系的 $s$ 组成的集合。在区间左侧之外的 $s$ 都满足 $f(s)<k$，在区间右侧之外的 $s$ 都满足 $f(s)\ge k$。在理解二分时，请牢记区间的定义及其性质。

### 回溯的细节

定义递归函数 $\textit{dfs}(i,s)$ 表示在第 $i$ 行中「枚举选哪个」，当前剩余元素和为 $s$。这里定义成「剩余」是为了只与 $0$ 比较，而不是与一个递归函数之外的变量比较，从而减少递归函数之外的变量的引入。同理，$i$ 也可以从 $m-1$ 开始递归。

定义 $\textit{leftK}$ 为剩余需要寻找的子数组的个数，只要能递归到边界，就说明找到了一个符合要求的子数组和，把 $\textit{leftK}$ 减一，一旦 $\textit{leftK}=0$ 就不再递归。

此外还有一个重要的**剪枝**：如果 $s$ 减去剩余行的第一个数，会小于 $0$，说明后面无法找到满足要求的子数组和，也就无需继续递归了。代码实现时，可以先把第一列的所有元素从 $s$ 中减去，这样无需计算剩余行的第一个数的和。

### 答疑

**问**：二分算出的答案，有没有可能不是由 $\textit{mat}$ 中的元素求和得到的？比如 $\textit{mat}$ 中的元素都是偶数，但是二分算出来的却是奇数。

**答**：这是不会的，上面说 $f(s-1)=k-1$ 且 $f(s)=k$，这种「从 $k-1$ 到 $k$ 的变化」只能是由 $\textit{mat}$ 中的元素求和得到的。反证：如果 $s$ 不是由 $\textit{mat}$ 中的元素求和得到的，那么把其中一个不在 $\textit{mat}$ 中的元素减一，算出来的数组和的个数是不变的，即 $f(s-1)=f(s)=k$，矛盾。

* [sol2-Python3]

```py
class Solution:
    def kthSmallest(self, mat: List[List[int]], k: int) -> int:
        def check(s: int) -> bool:
            left_k = k
            # 返回是否找到 k 个子数组和
            def dfs(i: int, s: int) -> bool:
                if i < 0:  # 能递归到这里，说明数组和不超过二分的 s
                    nonlocal left_k
                    left_k -= 1
                    return left_k == 0  # 是否找到 k 个
                for x in mat[i]:  # 「枚举选哪个」，注意 mat[i] 是有序的
                    if x - mat[i][0] > s:  # 选 x 不选 mat[i][0]
                        break  # 剪枝：后面的元素更大，无需枚举
                    if dfs(i - 1, s - (x - mat[i][0])):  # 选 x 不选 mat[i][0]
                        return True  # 找到 k 个就一直返回 True，不再递归
                return False
            return dfs(len(mat) - 1, s - sl)  # 先把第一列的所有数都选上

        sl = sum(row[0] for row in mat)
        sr = sum(row[-1] for row in mat)
        return sl + bisect_left(range(sl, sr), True, key=check)
```

* [sol2-Java]

```java
class Solution {
    private int leftK;

    public int kthSmallest(int[][] mat, int k) {
        int sl = 0, sr = 0;
        for (var row : mat) {
            sl += row[0];
            sr += row[row.length - 1];
        }
        // 二分模板 https://www.bilibili.com/video/BV1AP41137w7/
        int left = sl - 1, right = sr; // 开区间 (sl-1,sr)
        while (left + 1 < right) { // 开区间不为空
            // 循环不变量：
            // f(left) < k
            // f(right) >= k
            int mid = (left + right) >>> 1;
            leftK = k;
            if (dfs(mat, mat.length - 1, mid - sl)) // 先把第一列的所有数都选上
                right = mid; // 二分范围缩小至开区间 (left, mid)
            else // f(mid) < k
                left = mid; // 二分范围缩小至开区间 (mid, right)
        }
        return right;
    }

    // 返回是否找到 k 个子数组和
    private boolean dfs(int[][] mat, int i, int s) {
        if (i < 0) // 能递归到这里，说明数组和不超过二分的 mid
            return --leftK == 0; // 是否找到 k 个
        for (int x : mat[i]) { // 「枚举选哪个」，注意 mat[i] 是有序的
            if (x - mat[i][0] > s) // 选 x 不选 mat[i][0]
                break; // 剪枝：后面的元素更大，无需枚举
            if (dfs(mat, i - 1, s - (x - mat[i][0]))) // 选 x 不选 mat[i][0]
                return true; // 找到 k 个就一直返回 true，不再递归
        }
        return false;
    }
}
```

* [sol2-C++]

```cpp
class Solution {
    // 返回是否找到 k 个子数组和
    bool dfs(vector<vector<int>> &mat, int &left_k, int i, int s) {
        if (i < 0) // 能递归到这里，说明数组和不超过二分的 mid
            return --left_k == 0; // 是否找到 k 个
        for (int x: mat[i]) { // 「枚举选哪个」，注意 mat[i] 是有序的
            if (x - mat[i][0] > s) // 选 x 不选 mat[i][0]
                break; // 剪枝：后面的元素更大，无需枚举
            if (dfs(mat, left_k, i - 1, s - (x - mat[i][0]))) // 选 x 不选 mat[i][0]
                return true; // 找到 k 个就一直返回 true，不再递归
        }
        return false;
    }

public:
    int kthSmallest(vector<vector<int>> &mat, int k) {
        int sl = 0, sr = 0;
        for (auto &row: mat) {
            sl += row[0];
            sr += row.back();
        }
        // 二分模板 https://www.bilibili.com/video/BV1AP41137w7/
        int left = sl - 1, right = sr; // 开区间 (sl-1,sr)
        while (left + 1 < right) { // 开区间不为空
            // 循环不变量：
            // f(left) < k
            // f(right) >= k
            int mid = left + (right - left) / 2;
            int left_k = k;
            if (dfs(mat, left_k, mat.size() - 1, mid - sl)) // 先把第一列的所有数都选上
                right = mid; // 二分范围缩小至开区间 (left, mid)
            else // f(mid) < k
                left = mid; // 二分范围缩小至开区间 (mid, right)
        }
        return right;
    }
};
```

* [sol2-Go]

```go
func kthSmallest(mat [][]int, k int) int {
    sl, sr := 0, 0
    for _, row := range mat {
        sl += row[0]
        sr += row[len(row)-1]
    }
    return sl + sort.Search(sr-sl, func(s int) bool {
        leftK := k
        // 返回是否找到 k 个子数组和
        var dfs func(int, int) bool
        dfs = func(i, s int) bool {
            if i < 0 { // 能递归到这里，说明数组和满足要求
                leftK--
                return leftK == 0 // 是否找到 k 个
            }
            for _, x := range mat[i] { // 「枚举选哪个」，注意 mat[i] 是有序的
                if x-mat[i][0] > s { // 选 x 不选 mat[i][0]
                    break // 剪枝：后面的元素更大，无需枚举
                }
                if dfs(i-1, s-(x-mat[i][0])) { // 选 x 不选 mat[i][0]
                    return true // 找到 k 个就一直返回 true，不再递归
                }
            }
            return false
        }
        return dfs(len(mat)-1, s) // 这里的 s 已经把 sl 减掉了
    })
}
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(mk\log U)$，其中 $m$ 为 $\textit{mat}$ 的行数，$U$ 为 $\textit{mat}$ 最后一列的元素和减去第一列的元素和。二分 $\mathcal{O}(\log U)$ 次，回溯可以视作在一棵高度为 $\mathcal{O}(m)$，有 $\mathcal{O}(k)$ 个叶子的搜索树上遍历，这棵搜索树至多有 $\mathcal{O}(mk)$ 个节点。
- 空间复杂度：$\mathcal{O}(m)$。需要 $\mathcal{O}(m)$ 的递归栈空间。

## 算法三：最小堆

算法一的暴力做法，每次循环都是从**两个数组**中找到和最小的 $k$ 个数。

这和第 373 题是一样的，可以用最小堆来优化，具体可以看 [我的题解](https://leetcode.cn/problems/find-k-pairs-with-smallest-sums/solution/jiang-qing-chu-wei-shi-yao-yi-kai-shi-ya-i0dj/)，欢迎点赞~

* [sol3-Python3]

```py
class Solution:
    # 373. 查找和最小的 K 对数字
    def kSmallestPairs(self, nums1: List[int], nums2: List[int], k: int) -> List[int]:
        ans = []
        h = [(nums1[0] + nums2[0], 0, 0)]
        while h and len(ans) < k:
            _, i, j = heappop(h)
            ans.append(nums1[i] + nums2[j])  # 数对和
            if j == 0 and i + 1 < len(nums1):
                heappush(h, (nums1[i + 1] + nums2[0], i + 1, 0))
            if j + 1 < len(nums2):
                heappush(h, (nums1[i] + nums2[j + 1], i, j + 1))
        return ans

    def kthSmallest(self, mat: List[List[int]], k: int) -> int:
        a = mat[0][:k]
        for row in mat[1:]:
            a = self.kSmallestPairs(row, a, k)
        return a[-1]
```

* [sol3-Java]

```java
class Solution {
    public int kthSmallest(int[][] mat, int k) {
        var a = new int[]{0};
        for (var row : mat)
            a = kSmallestPairs(row, a, k);
        return a[k - 1];
    }

    // 373. 查找和最小的 K 对数字
    private int[] kSmallestPairs(int[] nums1, int[] nums2, int k) {
        int n = nums1.length, m = nums2.length, sz = 0;
        var ans = new int[Math.min(k, n * m)];
        var pq = new PriorityQueue<int[]>((a, b) -> a[0] - b[0]);
        pq.add(new int[]{nums1[0] + nums2[0], 0, 0});
        while (!pq.isEmpty() && sz < k) {
            var p = pq.poll();
            int i = p[1], j = p[2];
            ans[sz++] = nums1[i] + nums2[j]; // 数对和
            if (j == 0 && i + 1 < n)
                pq.add(new int[]{nums1[i + 1] + nums2[0], i + 1, 0});
            if (j + 1 < m)
                pq.add(new int[]{nums1[i] + nums2[j + 1], i, j + 1});
        }
        return ans;
    }
}
```

* [sol3-C++]

```cpp
class Solution {
    // 373. 查找和最小的 K 对数字
    vector<int> kSmallestPairs(vector<int> &nums1, vector<int> &nums2, int k) {
        vector<int> ans;
        priority_queue<tuple<int, int, int>> pq;
        int n = nums1.size(), m = nums2.size();
        pq.emplace(-nums1[0] - nums2[0], 0, 0); // 取相反数变成小顶堆
        while (!pq.empty() && ans.size() < k) {
            auto [_, i, j] = pq.top();
            pq.pop();
            ans.push_back(nums1[i] + nums2[j]); // 数对和
            if (j == 0 && i + 1 < n)
                pq.emplace(-nums1[i + 1] - nums2[0], i + 1, 0);
            if (j + 1 < m)
                pq.emplace(-nums1[i] - nums2[j + 1], i, j + 1);
        }
        return ans;
    }

public:
    int kthSmallest(vector<vector<int>> &mat, int k) {
        vector<int> a = {0};
        for (auto &row: mat)
            a = kSmallestPairs(row, a, k);
        return a.back();
    }
};
```

* [sol3-Go]

```go
// 373. 查找和最小的 K 对数字
func kSmallestPairs(nums1, nums2 []int, k int) []int {
    n, m := len(nums1), len(nums2)
    ans := make([]int, 0, min(k, n*m)) // 预分配空间
    h := hp{{nums1[0] + nums2[0], 0, 0}}
    for len(h) > 0 && len(ans) < k {
        p := heap.Pop(&h).(tuple)
        i, j := p.i, p.j
        ans = append(ans, nums1[i]+nums2[j]) // 数对和
        if j == 0 && i+1 < n {
            heap.Push(&h, tuple{nums1[i+1] + nums2[0], i + 1, 0})
        }
        if j+1 < m {
            heap.Push(&h, tuple{nums1[i] + nums2[j+1], i, j + 1})
        }
    }
    return ans
}

func kthSmallest(mat [][]int, k int) int {
    a := []int{0}
    for _, row := range mat {
        a = kSmallestPairs(row, a, k)
    }
    return a[k-1]
}

type tuple struct{ s, i, j int }
type hp []tuple
func (h hp) Len() int           { return len(h) }
func (h hp) Less(i, j int) bool { return h[i].s < h[j].s }
func (h hp) Swap(i, j int)      { h[i], h[j] = h[j], h[i] }
func (h *hp) Push(v any)        { *h = append(*h, v.(tuple)) }
func (h *hp) Pop() any          { a := *h; v := a[len(a)-1]; *h = a[:len(a)-1]; return v }
func min(a, b int) int { if b < a { return b }; return a }
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(mk\log\min(n,k))$，其中 $m$ 和 $n$ 分别为 $\textit{mat}$ 的行数和列数。每次循环相当于解决一遍第 373 题，时间为 $\mathcal{O}(k\log\min(n,k))$，所以总的时间复杂度为 $\mathcal{O}(mk\log\min(n,k))$。
- 空间复杂度：$\mathcal{O}(\min(n,k))$。堆中至多有 $\mathcal{O}(\min(n,k))$ 个元素。

#### 相似题目（第 k 小/大）

- [373. 查找和最小的 K 对数字](https://leetcode.cn/problems/find-k-pairs-with-smallest-sums/)
- [378. 有序矩阵中第 K 小的元素](https://leetcode.cn/problems/kth-smallest-element-in-a-sorted-matrix/)
- [719. 找出第 K 小的数对距离](https://leetcode.cn/problems/find-k-th-smallest-pair-distance/)
- [786. 第 K 个最小的素数分数](https://leetcode.cn/problems/k-th-smallest-prime-fraction/)
- [2040. 两个有序数组的第 K 小乘积](https://leetcode.cn/problems/kth-smallest-product-of-two-sorted-arrays/)
- [2386. 找出数组的第 K 大和](https://leetcode.cn/problems/find-the-k-sum-of-an-array/)

#### 二分答案（按照难度分排序）

- [875. 爱吃香蕉的珂珂](https://leetcode.cn/problems/koko-eating-bananas/)
- [1283. 使结果不超过阈值的最小除数](https://leetcode.cn/problems/find-the-smallest-divisor-given-a-threshold/)
- [2187. 完成旅途的最少时间](https://leetcode.cn/problems/minimum-time-to-complete-trips/)
- [2226. 每个小孩最多能分到多少糖果](https://leetcode.cn/problems/maximum-candies-allocated-to-k-children/)
- [1870. 准时到达的列车最小时速](https://leetcode.cn/problems/minimum-speed-to-arrive-on-time/)
- [1011. 在 D 天内送达包裹的能力](https://leetcode.cn/problems/capacity-to-ship-packages-within-d-days/)
- [2064. 分配给商店的最多商品的最小值](https://leetcode.cn/problems/minimized-maximum-of-products-distributed-to-any-store/)
- [1760. 袋子里最少数目的球](https://leetcode.cn/problems/minimum-limit-of-balls-in-a-bag/)
- [1482. 制作 m 束花所需的最少天数](https://leetcode.cn/problems/minimum-number-of-days-to-make-m-bouquets/)
- [1642. 可以到达的最远建筑](https://leetcode.cn/problems/furthest-building-you-can-reach/)
- [1898. 可移除字符的最大数目](https://leetcode.cn/problems/maximum-number-of-removable-characters/)
- [778. 水位上升的泳池中游泳](https://leetcode.cn/problems/swim-in-rising-water/)
- [2258. 逃离火灾](https://leetcode.cn/problems/escape-the-spreading-fire/)

#### 最小化最大值

- [2439. 最小化数组中的最大值](https://leetcode.cn/problems/minimize-maximum-of-array/)
- [2513. 最小化两个数组中的最大值](https://leetcode.cn/problems/minimize-the-maximum-of-two-arrays/)
- [2560. 打家劫舍 IV](https://leetcode.cn/problems/house-robber-iv/)
- [2616. 最小化数对的最大差值](https://leetcode.cn/problems/minimize-the-maximum-difference-of-pairs/)

#### 最大化最小值

- [1552. 两球之间的磁力](https://leetcode.cn/problems/magnetic-force-between-two-balls/)
- [2517. 礼盒的最大甜蜜度](https://leetcode.cn/problems/maximum-tastiness-of-candy-basket/)
- [2528. 最大化城市的最小供电站数目](https://leetcode.cn/problems/maximize-the-minimum-powered-city/)

[往期每日一题题解（按 tag 分类）](https://github.com/EndlessCheng/codeforces-go/blob/master/leetcode/SOLUTIONS.md)

---

欢迎关注[biIibiIi@灵茶山艾府](https://space.bilibili.com/206214)，高质量算法教学，持续输出中~
