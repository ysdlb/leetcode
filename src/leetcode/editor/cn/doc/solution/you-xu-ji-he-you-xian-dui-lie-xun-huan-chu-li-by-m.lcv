### 解题思路

*概述: 把所有数都变成自己可变化范围的最大值, 然后不断缩小当前的最大值.*

(这题算啥?) 贪心? 模拟?

首先: 一个数的变化范围有限, 比如所有的奇数都只能做一次乘 2 操作, 偶数可以做若干次除以 2 的操作.

比如 3 可以变成 3, 6; 4 可以变成 1, 2, 4; 12 可以变成 3, 6, 12...

数值可以双向变化不好处理, 我们先变成单向的: **把所有数都变成自己可变化范围的最大值**.

那么现在剩下的操作就只有把数缩小了.

而偏移量 = 最大值 - 最小值, 所以我们要做的就是缩小最大值. (缩小其他数值也无法优化偏移量)

那么操作就是: **不断缩小当前的最大值即可, 直到不能缩小**, 期间不断维护答案.

Java 使用 `TreeSet` 或者 `PriorityQueue` 都可以动态维护最大值.

空间复杂度 o(N), 时间复杂度 o(NlogNlogN)

最多循环 NlogN 次, 因为一个数除以 2 的次数是 logN; 每次循环是 logN.

时间内存均击败 100% (截止 CST 2020.11.29 12:24)

执行用时：197 ms, 在所有 Java 提交中击败了 100.00% 的用户
内存消耗：53 MB, 在所有 Java 提交中击败了 100.00% 的用户

### 代码

* java

```java
class Solution {
    public int minimumDeviation(int[] nums) {
        TreeSet<Integer> set = new TreeSet<>();
        for (int num : nums) {
            set.add(num % 2 == 0 ? num : num * 2);
        }
        int res = set.last() - set.first();
        while (res > 0 && set.last() % 2 == 0) {
            int max = set.last();
            set.remove(max);
            set.add(max / 2);
            res = Math.min(res, set.last() - set.first());
        }
        return res;
    }
}
```

