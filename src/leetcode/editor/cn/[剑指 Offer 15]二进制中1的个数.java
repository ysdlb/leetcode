//编写一个函数，输入是一个无符号整数（以二进制串的形式），返回其二进制表达式中数字位数为 '1' 的个数（也被称为 汉明重量).）。 
//
// 
//
// 提示： 
//
// 
// 请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的
//还是无符号的，其内部的二进制表示形式都是相同的。 
// 在 Java 中，编译器使用 二进制补码 记法来表示有符号整数。因此，在上面的 示例 3 中，输入表示有符号整数 -3。 
// 
//
// 
//
// 示例 1： 
//
// 
//输入：n = 11 (控制台输入 00000000000000000000000000001011)
//输出：3
//解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 '1'。
// 
//
// 示例 2： 
//
// 
//输入：n = 128 (控制台输入 00000000000000000000000010000000)
//输出：1
//解释：输入的二进制串 00000000000000000000000010000000 中，共有一位为 '1'。
// 
//
// 示例 3： 
//
// 
//输入：n = 4294967293 (控制台输入 11111111111111111111111111111101，部分语言中 n = -3）
//输出：31
//解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 '1'。 
//
// 
//
// 提示： 
//
// 
// 输入必须是长度为 32 的 二进制串 。 
// 
//
// 
//
// 注意：本题与主站 191 题相同：https://leetcode-cn.com/problems/number-of-1-bits/ 
// Related Topics 位运算 👍 210 👎 0


//leetcode submit region begin(Prohibit modification and deletion)
class SolutionOffer15 {
    // you need to treat n as an unsigned value

    /**
     * 汉明重量, redis 实现
     * 1. 将连续 2 位的 1 的个数都加到低位上
     *      n = (n & 0x55555555) + (n>>>1) & 0x55555555
     *
     * 1. 将连续 4 位的 1 的个数都加到低位上
     *      n = (n & 0x33333333) + (n>>>2) & 0x33333333
     *
     * 1. 将连续 8 位的 1 的个数都加到低位上
     *      n = (n & 0x0f0f0f0f) + (n>>>4) & 0x0f0f0f0f
     *
     * 1. 将 4 个 8 位的 1 的个数都加到高 8 位上, 然后取高 8 位的值
     *      n = n + (n<<8) + (n<<16) + (n<<24);
     *      return n >> 24;
     */
    public int hammingWeight(int n) {
        n = (n & 0x55555555) + ((n>>>1) & 0x55555555);
        n = (n & 0x33333333) + ((n>>>2) & 0x33333333);
        n = (n & 0x0f0f0f0f) + ((n>>>4) & 0x0f0f0f0f);
        n = n + (n<<8) + (n<<16) + (n<<24);
        return n >> 24;
    }
}
class SolutionOffer15_2 {
    // you need to treat n as an unsigned value

/**
 * 对任意 n
 * n & (n-1) 会把 n 最右边对一个 1 变成 0
 * 无论是正数还是负数, 都会往 0 靠拢
 */
public int hammingWeight(int n) {
    int count = 0;
    while (n != 0) {
        count++;
        n = n & (n - 1);
    }
    return count;
}
}
//leetcode submit region end(Prohibit modification and deletion)
