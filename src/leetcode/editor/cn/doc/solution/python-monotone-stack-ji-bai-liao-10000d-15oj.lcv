### 解题思路

执行用时：288 ms, 在所有 Python3 提交中击败了100.00%的用户
内存消耗：30.9 MB, 在所有 Python3 提交中击败了62.74%的用户
基于monotone stack：stack里放(end，cumulated_profit)。对于一个新的(start, end, tip)，使用start+二分找到在start之前结束的历史旅程，并以此旅程的profit加上这次能赚的作为cumulated_profit。monotone指维持stack以使新的来的ride必须要有更高的cumulated_profit，以保持end和cumulated_profit都恒增的性质。
Time Complexity: O(n logn)
Space Complexity: O(n)

### 代码

* python3

```python
import bisect

class Solution:
    def maxTaxiEarnings(self, n: int, rides: List[List[int]]) -> int:
            rides = sorted(rides, key=lambda x: x[1])
            stack = []
            for ride in rides:
                insert_idx = bisect.bisect_right(stack, [ride[0], float("inf")])
                earn = ride[2] + ride[1] - ride[0]
                if insert_idx != 0:
                    earn += stack[insert_idx - 1][1]
                if not stack:
                    stack.append([ride[1], earn])
                elif stack[-1][0] == ride[1]:
                    stack[-1][1] = max(stack[-1][1], earn)
                else:
                    if earn > stack[-1][1]:
                        stack.append([ride[1], earn])
            return stack[-1][1]







```

