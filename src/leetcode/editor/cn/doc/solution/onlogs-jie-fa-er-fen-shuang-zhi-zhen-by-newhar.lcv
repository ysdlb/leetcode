#### 相关题目

[378. 有序矩阵中第 K 小的元素](https://leetcode-cn.com/problems/kth-smallest-element-in-a-sorted-matrix/)
[719. 找出第 k 小的距离对](https://leetcode-cn.com/problems/find-k-th-smallest-pair-distance/)

#### 解题思路

#### 1. 求出新数组的第 $k$ 项，也就是找出原数组中第 $k$ 小的区间和 $x$。

至于如何找出，可以参考第 378 题 和 719 题的思路。为此我们首先构造出一个 **前缀和矩阵 $S$**，其在第 $i$ 行第 $j$ 列的元素 $S_{i,j}(j \ge i)$ 为原数组 $nums$ 的从第 $i$ 个元素到第 $j$ 个元素的和。

显然，这个矩阵 **关于 $i$ 递减，关于 $j$ 递增。** 因此我们可以用类似 378 题的思路（二分+双指针）来求排序后数组的第 $k$ 小元素。简单来说，就是用二分法枚举元素的大小 $x$，然后采用双指针的思路来检验矩阵中 $< x$ 的元素的数量。

例如：下面是由 $[1,2,3,4,5,6,7,8,9,10]$ 构造出的矩阵的色阶图。假设我们要找所有的 $val < 20$ 的元素数量，我们只需要沿着图中的线走一遍即可。

![深度截图_选择区域_20200717210440.png](https://pic.leetcode-cn.com/8abaec2fbebe1e1d07f729d3d5ba912d79723901907b620818ca107bdbe26d31-%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20200717210440.png)

#### 2. 求出新数组的前 $k$ 项和 $f(k)$。

首先求出新数组中的第 $k$ 小的元素 $x$。注意，$x$ 可能有多个，比如 $...a,a,x,x,[x],x,c,d...$，第 $k$ 小元素为 $x$。此时可以分步来求：先求所有 **严格小于 $x$** 的元素和 $sum$，和元素个数 $cnt$，那么等于 $x$ 的元素数量就是 $k - cnt$，因此总的答案 $f(k) = sum + (k - cnt) \times x$。

其中 $cnt$ 很好求，因为我们在第一步时就已经用双指针遍历解决了这个问题。

实际上，$sum$ 也可以在双指针遍历时同时求出。对于矩阵的第 $i$ 行，当我们通过双指针遍历找到使 $S_{i,j} \ge x$ 的最小的 $j$ 后，那么我们只需快速求出 $\displaystyle{S_{i,i} + S_{i,i+1} + \dots + S_{i,j-1}}$，将其加入到 $sum$ 中即可：

$\begin{aligned} \sum_{k=i}^{j-1}S_{i,k} & \xlongequal[]{对\ num\ 求前缀和\ psum} & &\sum_{k=i}^{j-1}(psum[k] - psum[i-1]) \\&\xlongequal[]{psum[i-1]\ 与\ k\ 无关} & &\sum_{k=i}^{j-1}psum[k] -(j-i)\times psum[i-1] \\& \xlongequal[]{对\ psum\ 求前缀和\ ppsum} & &(ppsum[j-1]-ppsum[i-1]) - (j-i) \times psum[i-1] \end{aligned}$

为了避免当 $i=0$ 时访问 $psum[-1]$ 而越界，可以在求 $psum$ 时，向右挪一个单位（这样也会使得 $ppsum$ 右挪一个单位），此时公式变为

$\sum_{k=i}^{j-1}S_{i,k} = (ppsum[j]-ppsum[i]) - (j-i) \times psum[i].$

为了避免溢出，答案和中间结果用 long (64位) 来存储。

#### 3. 算出答案。

根据 $f(k)$ 的定义，题目的答案就是 $f(right) - f(left-1)$（不要忘了取模）。

#### 代码 / 4ms

* cpp

```cpp
class Solution {
public:
    int rangeSum(vector<int>& nums, int n, int left, int right) {
        // 求 psums 和 ppsums。
        // 注：求 psums 时右挪一个单位；求 ppsums 无需右挪一个单位，它已经随着 psum 右挪
        vector<long> psum(n+1, 0), ppsum(n+1, 0);
        for(int i = 1; i <= n; ++i)
            psum[i] = psum[i-1] + nums[i-1];
        for(int i = 1; i <= n; ++i)
            ppsum[i] = ppsum[i-1] + psum[i];
        
        // 求 < x 的所有的区间和的和 sum 和个数 cnt
        auto get_sum_cnt = [&](int x) -> pair<long ,long> {
            long sum = 0, cnt = 0;
            for(int i = 0, j = 0; i < n; ++i) {
                while(j < n && psum[j+1] - psum[i] < x)
                    ++j;
                sum += ppsum[j] - ppsum[i] - (j - i) * psum[i];
                cnt += j - i;
            }
            return {sum, cnt};
        };

        // 求新数组的第 k 个数（也就是原数组的第 k 小区间和）
        auto get_kth = [&](int k) -> long {
            int l = 0, r = psum[n];
            while(l < r) {
                int mid = (l + r + 1) / 2;
                auto [sum, cnt] = get_sum_cnt(mid);
                if(cnt < k)
                    l = mid;
                else
                    r = mid - 1;
            }
            return l;
        };

        auto f = [&](int k) -> long {
            auto x = get_kth(k);
            auto [sum, cnt] = get_sum_cnt(x);
            return sum + (k - cnt) * x;
        };
        
        return (f(right) - f(left - 1)) % (1000000007);
    }
};
```

