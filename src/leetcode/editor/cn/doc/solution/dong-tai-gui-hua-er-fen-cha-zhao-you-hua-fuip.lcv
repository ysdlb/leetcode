按照结束时间排序。

定义 $f[i][j]$ 表示参加前 $i$ 个会议中的至多 $j$ 个，能得到的会议价值的最大和。

分类讨论：

- 不参加第 $i$ 个会议：$f[i][j] = f[i-1][j]$；
- 参加第 $i$ 个会议：$f[i][j] = f[p][j-1] + \textit{value}[i]$，其中 $p$ 是最大的满足 $\textit{endDay}[p]<\textit{startDay}[i]$ 的 $p$，不存在时为 $-1$。

两者取最大值，即

$$
f[i][j] = \max(f[i-1][j],f[p][j-1] + \textit{value}[i])
$$

代码实现时，为避免处理 $-1$，可将与 $f$ 有关的下标都 $+1$，即

$$
f[i+1][j] = \max(f[i][j], f[p+1][j-1]+\textit{value}[i])
$$

答案为 $f[n][k]$。

代码实现时，由于结束时间是有序的，$p$ 可以用二分查找计算出来。

* [sol1-Python3]

```py
class Solution:
    def maxValue(self, events: List[List[int]], k: int) -> int:
        events.sort(key=lambda e: e[1])
        n = len(events)
        f = [[0] * (k + 1) for _ in range(n + 1)]
        for i, (start, end, val) in enumerate(events):
            p = bisect_left(events, start, hi=i, key=lambda e: e[1])  # hi=i 表示二分上界为 i（默认为 n）
            for j in range(1, k + 1):
                # 为什么是 p 不是 p+1：上面算的是 >= start，-1 后得到 < start，但由于还要 +1，抵消了
                f[i + 1][j] = max(f[i][j], f[p][j - 1] + val)
        return f[n][k]
```

* [sol1-Java]

```java
class Solution {
    public int maxValue(int[][] events, int k) {
        Arrays.sort(events, (a, b) -> a[1] - b[1]); // 按照结束时间排序
        var n = events.length;
        var f = new int[n + 1][k + 1];
        for (var i = 0; i < n; ++i) {
            var p = search(events, i, events[i][0]);
            for (var j = 1; j <= k; ++j)
                f[i + 1][j] = Math.max(f[i][j], f[p + 1][j - 1] + events[i][2]);
        }
        return f[n][k];
    }

    // 返回 endDay < upper 的最大下标
    private int search(int[][] events, int right, int upper) {
        var left = -1;
        while (left + 1 < right) {
            var mid = (left + right) / 2;
            if (events[mid][1] < upper) left = mid;
            else right = mid;
        }
        return left;
    }
}
```

* [sol1-C++]

```cpp
class Solution {
public:
    int maxValue(vector<vector<int>> &events, int k) {
        sort(events.begin(), events.end(), [](auto &a, auto &b) { return a[1] < b[1]; }); // 按照结束时间排序
        int n = events.size(), f[n + 1][k + 1];
        memset(f, 0, sizeof(f));
        for (int i = 0; i < n; ++i) {
            int p = lower_bound(events.begin(), events.begin() + i, events[i][0],
                                [](auto &e, int lower) { return e[1] < lower; }) - events.begin();
            for (int j = 1; j <= k; ++j)
                // 为什么是 p 不是 p+1：上面算的是 >= events[i][0]，-1 后得到 < events[i][0]，但由于还要 +1，抵消了
                f[i + 1][j] = max(f[i][j], f[p][j - 1] + events[i][2]);
        }
        return f[n][k];
    }
};
```

* [sol1-Go]

```go
func maxValue(events [][]int, k int) int {
	sort.Slice(events, func(i, j int) bool { return events[i][1] < events[j][1] }) // 按照结束时间排序
	n := len(events)
	f := make([][]int, n+1)
	for i := range f {
		f[i] = make([]int, k+1)
	}
	for i, e := range events {
		p := sort.Search(i, func(j int) bool { return events[j][1] >= e[0] })
		for j := 1; j <= k; j++ {
			// 为什么是 p 不是 p+1：上面算的是 >= e[0]，-1 后得到 < e[0]，但由于还要 +1，抵消了
			f[i+1][j] = max(f[i][j], f[p][j-1]+e[2])
		}
	}
	return f[n][k]
}

func max(a, b int) int { if b > a { return b }; return a }
```

#### 编程小课堂 · 标准库二分的灵活运用

在写二分题目时，经常会遇到形如「在有序数组中查询大于某个数的最小数」这类问题。具体来说有四类：

- $\ge$：在有序数组中查询大于或等于某个数的最小数；
- $>$：在有序数组中查询大于某个数的最小数；
- $\le$：在有序数组中查询小于或等于某个数的最大数；
- $<$：在有序数组中查询小于某个数的最大数。

上面的 Python/C++/Go 代码都中用到了标准库中的二分，但这些二分在设计的时候，只提供了查询 $\ge$ 和 $>$ 的功能，并没有提供查询 $\le$ 和 $<$ 的功能。

没有关系，稍微转换下就能解决。比如查询 $\ge$ 得到了下标 $i$，那么 $i-1$ 就是 $<$ 的结果了（假设数组为升序），同理 $\le$ 可以用 $>$ 算出来。

> 注：$>$ 和 $\ge$ 也可以转换，对于整数来说，$> x$ 等价于 $\ge x+1$。

#### 复杂度分析

- 时间复杂度：$O(nk+n\log n)$，其中 $n$ 为 $\textit{events}$ 的长度。
- 空间复杂度：$O(nk)$。

#### 相似题目

- [1235. 规划兼职工作](https://leetcode.cn/problems/maximum-profit-in-job-scheduling/)
- [2008. 出租车的最大盈利](https://leetcode.cn/problems/maximum-earnings-from-taxi/)

---

欢迎关注我的B站频道：[灵茶山艾府](https://space.bilibili.com/206214)，每周更新算法讲解视频哦~
