## 前置知识

详见 [动态规划入门：从记忆化搜索到递推](https://www.bilibili.com/video/BV1Xj411K7oF/)，欢迎点赞支持！

> APP 用户如果无法打开，可以分享到微信。

## 寻找子问题

以 $\textit{tiles}=\texttt{AABCC}$ 为例。先来思考，如何计算长为 $5$ 的序列的数目？由于相同字母不作区分，先考虑 $2$ 个 $\texttt{C}$ 如何放置。

这等价于在 $5$ 个位置中选 $2$ 个位置放 $\texttt{C}$，其余位置放 $\texttt{AAB}$。这 $2$ 个 $\texttt{C}$ 有 $\dbinom 5 2=10$ 种放法。剩余要解决的问题为，用 $\texttt{AAB}$ 构造长为 $3$ 的序列的数目。这是一个与原问题相似，且规模更小的子问题。

> 注：$\dbinom n k$ 表示从 $n$ 个数中选 $k$ 个数的方案数，即 $\dfrac{n!}{k!(n-k)!}$。

## 状态定义与转移

根据上面的讨论，定义 $f[i][j]$ 表示用前 $i$ 种字符构造长为 $j$ 的序列的方案数。

设第 $i$ 种字符有 $\textit{cnt}$ 个：

- 如果一个也不选，那么 $f[i][j] = f[i-1][j]$。
- 如果选 $k$ 个，那么需要从 $j$ 个位置中选 $k$ 个放第 $i$ 种字符，其余位置就是用前 $i-1$ 种字符构造长为 $j-k$ 的序列的方案数，所以有 $f[i][j] =f[i-1][j-k]\cdot \dbinom j k$。这里 $k\le\min(j,\textit{cnt})$。特别地，一个也不选相当于 $k=0$ 的情况。

所以，枚举 $k=0,1,\cdots,\min(j,\textit{cnt})$，把所有方案数相加，就得到了 $f[i][j]$，对应的状态转移方程为

$$
f[i][j] = \sum_{k=0}^{\min(j,\textit{cnt})} f[i-1][j-k]\cdot \binom j k
$$

初始值：$f[0][0]=1$，构造空序列的方案数为 $1$。

答案：$\sum\limits_{j=1}^{n}f[m][j]$，其中 $m$ 为 $\textit{tiles}$ 中的字母种数。

代码实现时，组合数可以用如下恒等式预处理

$$
\binom n k = \binom {n-1} {k-1} + \binom {n-1} k
$$

这个式子本质是考虑第 $n$ 个数「选或不选」。如果选，那么问题变成从 $n-1$ 个数中选 $k-1$ 个数的方案数；如果不选，那么问题变成从 $n-1$ 个数中选 $k$ 个数的方案数。二者相加即为从 $n$ 个数中选 $k$ 个数的方案数。

* [sol1-Python3]

```py
class Solution:
    def numTilePossibilities(self, tiles: str) -> int:
        counts = Counter(tiles).values()  # 统计每个字母的出现次数
        n, m = len(tiles), len(counts)
        f = [[0] * (n + 1) for _ in range(m + 1)]
        f[0][0] = 1  # 构造空序列的方案数
        for i, cnt in enumerate(counts, 1):  # 枚举第 i 种字母
            for j in range(n + 1):  # 枚举序列长度 j
                for k in range(min(j, cnt) + 1):  # 枚举第 i 种字母选了 k 个
                    f[i][j] += f[i - 1][j - k] * comb(j, k)  # comb 也可以预处理，见其它语言
        return sum(f[m][1:])
```

* [sol1-Java]

```java
class Solution {
    private static final int MX = 8;
    private static final int[][] c = new int[MX][MX];

    static {
        for (int i = 0; i < MX; i++) {
            c[i][0] = c[i][i] = 1;
            for (int j = 1; j < i; j++)
                c[i][j] = c[i - 1][j - 1] + c[i - 1][j]; // 预处理组合数
        }
    }

    public int numTilePossibilities(String tiles) {
        var counts = new HashMap<Character, Integer>(); // 统计每个字母的出现次数
        for (var c : tiles.toCharArray())
            counts.merge(c, 1, Integer::sum); // counts[c]++
        int m = counts.size(), n = tiles.length();
        var f = new int[m + 1][n + 1];
        f[0][0] = 1; // 构造空序列的方案数
        int i = 1;
        for (var cnt : counts.values()) { // 枚举第 i 种字母
            for (int j = 0; j <= n; j++) // 枚举序列长度 j
                for (int k = 0; k <= j && k <= cnt; k++) // 枚举第 i 种字母选了 k 个
                    f[i][j] += f[i - 1][j - k] * c[j][k];
            i++;
        }
        int ans = 0;
        for (int j = 1; j <= n; j++)
            ans += f[m][j];
        return ans;
    }
}
```

* [sol1-C++]

```cpp
const int MX = 8;
int c[MX][MX];

int init = []() {
    for (int i = 0; i < MX; i++) {
        c[i][0] = c[i][i] = 1;
        for (int j = 1; j < i; j++)
            c[i][j] = c[i - 1][j - 1] + c[i - 1][j]; // 预处理组合数
    }
    return 0;
}();

class Solution {
public:
    int numTilePossibilities(string tiles) {
        unordered_map<char, int> counts;
        for (char c: tiles) counts[c]++; // 统计每个字母的出现次数
        int n = tiles.length(), m = counts.size(), f[m + 1][n + 1];
        memset(f, 0, sizeof(f));
        f[0][0] = 1; // 构造空序列的方案数
        int i = 1;
        for (auto &[_, cnt]: counts) { // 枚举第 i 种字母
            for (int j = 0; j <= n; j++) // 枚举序列长度 j
                for (int k = 0; k <= j && k <= cnt; k++) // 枚举第 i 种字母选了 k 个
                    f[i][j] += f[i - 1][j - k] * c[j][k];
            i++;
        }
        return accumulate(f[m] + 1, f[m] + n + 1, 0);
    }
};
```

* [sol1-Go]

```go
const mx = 8
var c [mx][mx]int

func init() {
    for i := 0; i < mx; i++ {
        c[i][0], c[i][i] = 1, 1
        for j := 1; j < i; j++ {
            c[i][j] = c[i-1][j-1] + c[i-1][j] // 预处理组合数
        }
    }
}

func numTilePossibilities(tiles string) (ans int) {
    counts := map[rune]int{}
    for _, ch := range tiles {
        counts[ch]++ // 统计每个字母的出现次数
    }
    n, m := len(tiles), len(counts)
    f := make([][]int, m+1)
    f[0] = make([]int, n+1)
    f[0][0] = 1 // 构造空序列的方案数
    i := 1
    for _, cnt := range counts { // 枚举第 i 种字母
        f[i] = make([]int, n+1)
        for j := 0; j <= n; j++ { // 枚举序列长度 j
            for k := 0; k <= j && k <= cnt; k++ { // 枚举第 i 种字母选了 k 个
                f[i][j] += f[i-1][j-k] * c[j][k]
            }
        }
        i++
    }
    for _, x := range f[m][1:] {
        ans += x
    }
    return
}
```

### 复杂度分析

- 时间复杂度：$\mathcal{O}(n^2)$，其中 $n$ 为 $\textit{tiles}$ 的长度。虽然写了个三重循环，但换个角度，对于一个固定的 $j$，最内层的循环次数之和，约为所有字母的出现次数之和，即 $\mathcal{O}(n)$。相当于最外层和最内层合起来是一个 $\mathcal{O}(n)$ 的循环。所以三重循环的时间复杂度为 $\mathcal{O}(n^2)$。
- 空间复杂度：$\mathcal{O}(n^2)$。忽略预处理组合数的时间和空间。

> 注：也可以只预处理阶乘，用公式计算组合数。

## 空间优化

视频讲解见 [背包问题](https://www.bilibili.com/video/BV16Y411v7Y6/) 中的的空间优化。

由于 $f[i]$ 只从 $f[i-1]$ 转移过来，我们可以去掉第一个维度，只用一个一维数组。

和 0-1 背包问题一样，如果 $j$ 从小到大遍历，那么 $f[i-1][j]$ 保存的数据会被 $f[i][j]$ 覆盖，但是计算右边的 $f[i][j']$ 时，又需要 $f[i-1][j]$。倒序遍历 $j$ 即可解决此问题。

此外，可以累加 $\textit{cnt}$，记作 $n$，作为第二层循环的初始值，因为就算全部都选，前 $i$ 种字母的长度之和也不会超过 $n$，计算比 $n$ 更大的状态是没有意义的。

* [sol-Python3]

```py
class Solution:
    def numTilePossibilities(self, tiles: str) -> int:
        f = [1] + [0] * len(tiles)
        n = 0
        for cnt in Counter(tiles).values():  # 枚举第 i 种字母
            n += cnt  # 常数优化：相比从 len(tiles) 开始要更快
            for j in range(n, 0, -1):  # 枚举序列长度 j
                # 枚举第 i 种字母选了 k 个，注意 k=0 时的方案数已经在 f[j] 中了
                for k in range(1, min(j, cnt) + 1):
                    f[j] += f[j - k] * comb(j, k)  # comb 也可以预处理，见其它语言的实现
        return sum(f[1:])
```

* [sol-Java]

```java
class Solution {
    private static final int MX = 8;
    private static final int[][] c = new int[MX][MX];

    static {
        for (int i = 0; i < MX; i++) {
            c[i][0] = c[i][i] = 1;
            for (int j = 1; j < i; j++)
                c[i][j] = c[i - 1][j - 1] + c[i - 1][j]; // 预处理组合数
        }
    }

    public int numTilePossibilities(String tiles) {
        // 注：改成 int[26] 统计可能会快一点点，感兴趣可以试试（下面 DP 跳过 cnt=0 的情况）
        var counts = new HashMap<Character, Integer>(); // 统计每个字母的出现次数
        for (var c : tiles.toCharArray())
            counts.merge(c, 1, Integer::sum); // counts[c]++
        var f = new int[tiles.length() + 1];
        f[0] = 1; // 构造空序列的方案数
        int n = 0;
        for (var cnt : counts.values()) { // 枚举第 i 种字母
            n += cnt; // 常数优化：相比从 tiles.length() 开始要更快
            for (int j = n; j > 0; j--) // 枚举序列长度 j
                // 枚举第 i 种字母选了 k 个，注意 k=0 时的方案数已经在 f[j] 中了
                for (int k = 1; k <= j && k <= cnt; k++)
                    f[j] += f[j - k] * c[j][k];
        }
        int ans = 0;
        for (int j = 1; j <= n; j++)
            ans += f[j];
        return ans;
    }
}
```

* [sol-C++]

```cpp
const int MX = 8;
int c[MX][MX];

int init = []() {
    for (int i = 0; i < MX; i++) {
        c[i][0] = c[i][i] = 1;
        for (int j = 1; j < i; j++)
            c[i][j] = c[i - 1][j - 1] + c[i - 1][j]; // 预处理组合数
    }
    return 0;
}();

class Solution {
public:
    int numTilePossibilities(string tiles) {
        unordered_map<char, int> counts;
        for (char c: tiles) counts[c]++; // 统计每个字母的出现次数
        int f[tiles.size() + 1];
        memset(f, 0, sizeof(f));
        f[0] = 1; // 构造空序列的方案数
        int n = 0;
        for (auto &[_, cnt]: counts) { // 枚举第 i 种字母
            n += cnt; // 常数优化：相比从 tiles.length() 开始要更快
            for (int j = n; j; j--) // 枚举序列长度 j
                // 枚举第 i 种字母选了 k 个，注意 k=0 时的方案数已经在 f[j] 中了
                for (int k = 1; k <= j && k <= cnt; k++)
                    f[j] += f[j - k] * c[j][k];
        }
        return accumulate(f + 1, f + n + 1, 0);
    }
};
```

* [sol-Go]

```go
const mx = 8
var c [mx][mx]int

func init() {
    for i := 0; i < mx; i++ {
        c[i][0], c[i][i] = 1, 1
        for j := 1; j < i; j++ {
            c[i][j] = c[i-1][j-1] + c[i-1][j] // 预处理组合数
        }
    }
}

func numTilePossibilities(tiles string) (ans int) {
    counts := map[rune]int{}
    for _, ch := range tiles {
        counts[ch]++ // 统计每个字母的出现次数
    }
    f := make([]int, len(tiles)+1)
    f[0] = 1 // 构造空序列的方案数
    n := 0
    for _, cnt := range counts { // 枚举第 i 种字母
        n += cnt // 常数优化：相比从 tiles.length() 开始要更快
        for j := n; j > 0; j-- { // 枚举序列长度 j
            // 枚举第 i 种字母选了 k 个，注意 k=0 时的方案数已经在 f[j] 中了
            for k := 1; k <= j && k <= cnt; k++ {
                f[j] += f[j-k] * c[j][k]
            }
        }
    }
    for _, x := range f[1:] {
        ans += x
    }
    return
}
```

### 复杂度分析

- 时间复杂度：$\mathcal{O}(n^2)$，其中 $n$ 为 $\textit{tiles}$ 的长度。虽然写了个三重循环，但换个角度，对于一个固定的 $j$，最内层的循环次数之和，约为所有字母的出现次数之和，即 $\mathcal{O}(n)$。相当于最外层和最内层合起来是一个 $\mathcal{O}(n)$ 的循环。所以三重循环的时间复杂度为 $\mathcal{O}(n^2)$。
- 空间复杂度：$\mathcal{O}(n)$。忽略预处理组合数的时间和空间。

> 注：也可以只预处理阶乘，用公式计算组合数。

---

[往期每日一题题解](https://github.com/EndlessCheng/codeforces-go/blob/master/leetcode/SOLUTIONS.md)

欢迎关注[biIibiIi@灵茶山艾府](https://space.bilibili.com/206214)，高质量算法教学，持续输出中~
