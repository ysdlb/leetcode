由于 $\textit{words}$ 中所有单词的长度均等于 $N$，因此能够维护一个计数数组 $cnt$，其中 $cnt[i][ch]$ 表示在所有单词的第 $i$ 个字符中，字符 $ch$ 出现的次数。

记 $\textit{words}[i..]$ 为 $\{x[i..] ~~ | x \in \textit{words}\}$。意思是：将 $\textit{words}$ 的每个单词从第 $i$ 个字符起截取，得到的「新字典」。

随后记 $dp[i][j]$ 为：以 $\textit{words}[i..]$ 为字典，构造字符串 $\textit{target}[j..]$ 的方案数。

现在，考虑如何构造字符串 $\textit{target}[j..]$ 的首个字符，有以下两种情况：
- 不使用字典中位置为 $i$ 的字符。此时，问题归结于使用 $\textit{words}[i+1..]$ 为字典构造字符串的情形，故相应的方案数为 $dp[i+1][j]$。
- 使用字典中位置为 $i$ 的字符。此时，整个字典中，共有 $cnt[i][\textit{target}[j]]$ 个单词可供选择。在选择其中任意一个单词之后，根据题意，我们不能再选择任何一个单词的第 $i$ 个字符或其之前的字符。因此，此后为了得到后面的字符串 $\textit{target}[j+1..]$，会有 $dp[i+1][j+1]$ 种方案。

根据加法原理与乘法原理，总的方案数目为：
$$
dp[i][j] = dp[i+1][j] + dp[i+1][j+1] \cdot cnt[i][\textit{target}[j]]
$$

* [sol1-C++]

```C++
class Solution {
public:
    const int mod = 1e9+7;
    long dfs(vector<vector<long>>& dp, vector<vector<int>>& cnt, string& target, int i, int j, int n, int m) {
        if (j == m) return 1;
        if (n - i < m - j) return 0;
        if (dp[i][j] != -1) return dp[i][j];
        
        long val = cnt[i][target[j] - 'a'] * dfs(dp, cnt, target, i + 1, j + 1, n, m);
        val += dfs(dp, cnt, target, i + 1, j, n, m);
        val %= mod;
        return dp[i][j] = val;;
    }
    
    
    int numWays(vector<string>& words, string target) {
        int n = words[0].length();
        vector<vector<int>> cnt(n, vector<int>(26, 0));
        for (const auto& s: words) {
            for (int i = 0; i < n; i++) {
                cnt[i][s[i]-'a']++;
            }
        }
        
        int m = target.length();
        vector<vector<long>> dp(n, vector<long>(m, -1));
        return dfs(dp, cnt, target, 0, 0, n, m);
    }
};
```

时间复杂度为 $O(MN)$。
