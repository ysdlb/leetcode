class Solution {
    /**
     * 每次合并总会减少 k-1 堆石头, 最后一次减少 k 堆石头
     * (k-1) * (n-1) + k = total ==> (k-1)*n = total - 1
     *
     * 首先简化问题: 假设 k = 2
     * 则可以设置 f(i,j) 为 合并 [i,j] 区间内石头为 1 堆的最低成本
     * f(i,j) = min{f(i,m) + f(m+1,j) + sum(i,j)}   i <= m <= j
     *
     * 现在 k >= 2
     * 设置 f(i,j,x) 为合并 [i,j] 区间内石头为 x 堆的最低成本
     * f(i,j,1) = f(i,j,k) + sum(i,j)
     * f(i,j,x) = min{f(i,m,1) + f(m+1,j,x-1)}, 2 <= x <= k, i <= m < j; m += k-1
     *
     * 初始状态推断
     * 如果 j-i+1 == k, 则 f(i,j,k) == 0 ==> f(i,i,1) == 0
     * 即 f(i,i+1,2) == 0
     *
     * 从左到右, 从下到上遍历
     */
    public int mergeStones(int[] stones, int k) {
        // (k-1) * (n-1) + k = total ==> (k-1)*n = total - 1
        if ((stones.length - 1) % (k-1) != 0) return -1;

        int[] prefix = new int[stones.length+1];
        for (int i = 0; i < stones.length; i++) {
            prefix[i+1] = prefix[i] + stones[i];
        }

        int[][][] dp = new int[stones.length][stones.length][k+1];
        int INF = 99999;
        for (int i = 0; i < stones.length; i++) {
            for (int j = i; j < stones.length; j++) {
                for (int x = 1; x <= k; x++) {
                    dp[i][j][x] = INF;
                }
            }
            dp[i][i][1] = 0;
        }

        for (int i = stones.length - 1; i >= 0; i--) {
            // dp[3][4][2] == 0, 所以 j 不能从 i+k-1 开始
            for (int j = i+1; j < stones.length; j++) {
                for (int m = i; m < j; m += k-1) {
                    for (int x = 2; x <= k; x++) {
                        dp[i][j][x] = Math.min(dp[i][j][x], dp[i][m][1] + dp[m+1][j][x-1]);
                    }
                }
                // 这里如果 (j-i) % (k-1) != 0, dp[i][j][k] 会无穷大
                dp[i][j][1] = dp[i][j][k] + prefix[j+1] - prefix[i];
            }
        }
        return dp[0][stones.length-1][1];
    }
}
//runtime:3 ms
//memory:41 MB
