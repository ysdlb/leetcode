将青蛙分成 $5$ 种：

- 刚才发出了 $\text{c}$ 的声音。
- 刚才发出了 $\text{r}$ 的声音。
- 刚才发出了 $\text{o}$ 的声音。
- 刚才发出了 $\text{a}$ 的声音。
- 刚才发出了 $\text{k}$ 的声音。

遍历 $\textit{croakOfFrogs}$，例如当前遍历到 $\text{r}$，那么就看看有没有青蛙刚才发出了 $\text{c}$ 的声音，如果有，那么让它接着发出 $\text{r}$ 的声音。

这启发我们使用一个哈希表（数组）$\textit{cnt}$ 来维护这 $5$ 种青蛙的个数，并分类讨论：

- 遍历到 $\text{c}$ 时，看看有没有青蛙刚才发出了 $\text{k}$ 的声音，如果有，那么**复用**这只青蛙，让它接着发出 $\text{c}$ 的声音，即 `cnt['k']--` 和 `cnt['c']++`；如果没有这种青蛙，那么**新产生**一只青蛙发出 $\text{c}$ 的声音，即 `cnt['c']++`。
- 遍历到 $\text{r}$ 时，看看有没有青蛙刚才发出了 $\text{c}$ 的声音，如果有，那么**复用**这只青蛙，让它接着发出 $\text{r}$ 的声音，即 `cnt['c']--` 和 `cnt['r']++`；如果没有这种青蛙，由于题目要求青蛙必须从 $\text{c}$ 开始蛙鸣，不能直接从 $\text{r}$ 开始，所以返回 $-1$。
- 遍历到 $\text{o},\text{a},\text{k}$ 的情况类似 $\text{r}$，找到该字母在 $\text{croak}$ 的上一个字母的 $\textit{cnt}$ 值，如果 $\textit{cnt}$ 值大于 $0$，那么将其减一，同时当前字母的 $\textit{cnt}$ 值加一；如果上一个字母的 $\textit{cnt}$ 值等于 $0$，那么就返回 $-1$。

遍历结束后，所有青蛙必须在最后发出 $\text{k}$ 的声音，如果有青蛙在最后发出的声音不是 $\text{k}$（也就是 $\textit{cnt}$ 值大于 $0$），那么返回 $-1$，否则返回 $\textit{cnt}[\text{k}]$。

代码实现时，可以用一个哈希表（数组）$\textit{PREVIOUS}$ 记录 $\text{croak}$ 中的每个字母的上一个字母，从而避免写出大量 `if-else`。

* [sol1-Python3]

```py
# 预处理每个字母在 "croak" 中的上一个字母
PREVIOUS = dict(pairwise("croakc"[::-1]))

class Solution:
    def minNumberOfFrogs(self, croakOfFrogs: str) -> int:
        cnt = Counter()
        for ch in croakOfFrogs:
            pre = PREVIOUS[ch]  # pre 为 ch 在 "croak" 中的上一个字母
            if cnt[pre]:  # 如果有青蛙发出了 pre 的声音
                cnt[pre] -= 1  # 复用一只
            elif ch != 'c':  # 否则青蛙必须从 'c' 开始蛙鸣
                return -1  # 不符合要求
            cnt[ch] += 1  # 发出了 ch 的声音
        if any(cnt[ch] for ch in "croa"):
            return -1  # 有发出其它声音的青蛙，不符合要求
        return cnt['k']  # 最后青蛙们都发出了 'k' 的声音
```

* [sol1-Java]

```java
class Solution {
    // 数组比哈希表快。's' 保证 "croak" 中的任意字符都不会越界
    private static final char[] PREVIOUS = new char['s'];

    static { // 预处理每个字母在 "croak" 中的上一个字母
        var s = "croakc".toCharArray();
        for (int i = 1; i < s.length; i++)
            PREVIOUS[s[i]] = s[i - 1];
    }

    public int minNumberOfFrogs(String croakOfFrogs) {
        var cnt = new int['s'];
        for (var ch : croakOfFrogs.toCharArray()) {
            var pre = PREVIOUS[ch]; // pre 为 ch 在 "croak" 中的上一个字母
            if (cnt[pre] > 0) // 如果有青蛙发出了 pre 的声音
                cnt[pre]--; // 复用一只
            else if (ch != 'c') // 否则青蛙必须从 'c' 开始蛙鸣
                return -1; // 不符合要求
            cnt[ch]++; // 发出了 ch 的声音
        }
        if (cnt['c'] > 0 || cnt['r'] > 0 || cnt['o'] > 0 || cnt['a'] > 0)
            return -1; // 有发出其它声音的青蛙，不符合要求
        return cnt['k']; // 最后青蛙们都发出了 'k' 的声音
    }
}
```

* [sol1-C++]

```cpp
class Solution {
public:
    int minNumberOfFrogs(string croakOfFrogs) {
        // 预处理每个字母在 "croak" 中的上一个字母
        char PREVIOUS['s']; // 's' 保证 "croak" 中的任意字符都不会越界
        const string croak = "croakc";
        for (int i = 1; i < croak.length(); i++)
            PREVIOUS[croak[i]] = croak[i - 1];

        int cnt['s']{};
        for (char ch: croakOfFrogs) {
            char pre = PREVIOUS[ch]; // pre 为 ch 在 "croak" 中的上一个字母
            if (cnt[pre]) // 如果有青蛙发出了 pre 的声音
                cnt[pre]--; // 复用一只
            else if (ch != 'c') // 否则青蛙必须从 'c' 开始蛙鸣
                return -1; // 不符合要求
            cnt[ch]++; // 发出了 ch 的声音
        }
        if (cnt['c'] || cnt['r'] || cnt['o'] || cnt['a'])
            return -1; // 有发出其它声音的青蛙，不符合要求
        return cnt['k']; // 最后青蛙们都发出了 'k' 的声音
    }
};
```

* [sol1-Go]

```go
// 每个字母在 "croak" 中的上一个字母
var previous = [...]int{'c': 'k', 'r': 'c', 'o': 'r', 'a': 'o', 'k': 'a'}

func minNumberOfFrogs(croakOfFrogs string) int {
    cnt := [len(previous)]int{}
    for _, ch := range croakOfFrogs {
        pre := previous[ch] // pre 为 ch 在 "croak" 中的上一个字母
        if cnt[pre] > 0 { // 如果有青蛙发出了 pre 的声音
            cnt[pre]-- // 复用一只
        } else if ch != 'c' { // 否则青蛙必须从 'c' 开始蛙鸣
            return -1 // 不符合要求
        }
        cnt[ch]++ // 发出了 ch 的声音
    }
    if cnt['c'] > 0 || cnt['r'] > 0 || cnt['o'] > 0 || cnt['a'] > 0 {
        return -1 // 有发出其它声音的青蛙，不符合要求
    }
    return cnt['k'] // 最后青蛙们都发出了 'k' 的声音
}
```

### 复杂度分析

- 时间复杂度：$\mathcal{O}(n)$，其中 $n$ 为 $\textit{croakOfFrogs}$ 的长度。
- 空间复杂度：$\mathcal{O}(|\Sigma|)$，其中 $|\Sigma|$ 为字符集合的大小，若采用哈希表实现，则 $|\Sigma|=5$。

---

[往期每日一题题解](https://github.com/EndlessCheng/codeforces-go/blob/master/leetcode/SOLUTIONS.md)

欢迎关注[biIibiIi@灵茶山艾府](https://space.bilibili.com/206214)，高质量算法教学，持续输出中~
