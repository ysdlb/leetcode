## 本题前置题目

推荐先做 [98. 验证二叉搜索树](https://leetcode.cn/problems/validate-binary-search-tree/)，用**后序遍历**实现。

讲解：[验证二叉搜索树【基础算法精讲 11】](https://www.bilibili.com/video/BV14G411P7C1/)，欢迎点赞支持！

> APP 用户如果无法打开，可以分享到微信。

## 思路

每棵子树返回：

- 这棵子树的最小节点值。
- 这棵子树的最大节点值。
- 这棵子树的所有节点值之和。

如果左子树的最大值 $\ge$ 当前节点值，或者右子树的最小值 $\le$ 当前节点值，都不符合二叉搜索树的定义，那么当前这棵子树不是二叉搜索树。此时可以返回 $-\infty, \infty, 0$（第三个数随意）。这种返回值可以简化代码，对于父节点，同样通过判断子树的最小值/最大值和当前节点值的大小关系，就可以知道子树是否为二叉搜索树了。

如果当前子树是二叉搜索树，那么把左右子树的节点值之和，加上当前节点值，去更新答案的最大值，并作为当前子树的所有节点值之和，返回给父节点。

#### 答疑

**问**：如果左子树不是二叉搜索树，那么当前子树也不是二叉搜索树，此时能否直接返回，不去递归右子树？

**答**：这是不对的，因为答案可能在右子树中（如示例 1）。如果你觉得这是显然的，不妨做做 [2246. 相邻字符不同的最长路径](https://leetcode.cn/problems/longest-path-with-different-adjacent-characters/)，一个易错点是没有遍历所有节点。

* [sol1-Python3]

```py
class Solution:
    def maxSumBST(self, root: Optional[TreeNode]) -> int:
        ans = 0  # 二叉搜索树可以为空

        def dfs(node: Optional[TreeNode]) -> Tuple:
            if node is None:
                return inf, -inf, 0

            l_min, l_max, l_sum = dfs(node.left)  # 递归左子树
            r_min, r_max, r_sum = dfs(node.right)  # 递归右子树
            x = node.val
            if x <= l_max or x >= r_min:  # 不是二叉搜索树
                return -inf, inf, 0

            s = l_sum + r_sum + x  # 这棵子树的所有节点值之和
            nonlocal ans
            ans = max(ans, s)

            return min(l_min, x), max(r_max, x), s

        dfs(root)
        return ans
```

* [sol1-Java]

```java
class Solution {
    private int ans; // 二叉搜索树可以为空

    public int maxSumBST(TreeNode root) {
        dfs(root);
        return ans;
    }

    private int[] dfs(TreeNode node) {
        if (node == null)
            return new int[]{Integer.MAX_VALUE, Integer.MIN_VALUE, 0};

        int[] left = dfs(node.left); // 递归左子树
        int[] right = dfs(node.right); // 递归右子树
        int x = node.val;
        if (x <= left[1] || x >= right[0]) // 不是二叉搜索树
            return new int[]{Integer.MIN_VALUE, Integer.MAX_VALUE, 0};

        int s = left[2] + right[2] + x; // 这棵子树的所有节点值之和
        ans = Math.max(ans, s);

        return new int[]{Math.min(left[0], x), Math.max(right[1], x), s};
    }
}
```

* [sol1-C++]

```cpp
class Solution {
    int ans = 0; // 二叉搜索树可以为空

    tuple<int, int, int> dfs(TreeNode *node) {
        if (node == nullptr)
            return {INT_MAX, INT_MIN, 0};

        auto [l_min, l_max, l_sum] = dfs(node->left); // 递归左子树
        auto [r_min, r_max, r_sum] = dfs(node->right); // 递归右子树
        int x = node->val;
        if (x <= l_max || x >= r_min) // 不是二叉搜索树
            return {INT_MIN, INT_MAX, 0};

        int s = l_sum + r_sum + x; // 这棵子树的所有节点值之和
        ans = max(ans, s);

        return {min(l_min, x), max(r_max, x), s};
    }

public:
    int maxSumBST(TreeNode *root) {
        dfs(root);
        return ans;
    }
};
```

* [sol1-Go]

```go
func maxSumBST(root *TreeNode) (ans int) {
    var dfs func(*TreeNode) (int, int, int)
    dfs = func(node *TreeNode) (int, int, int) {
        if node == nil {
            return math.MaxInt, math.MinInt, 0
        }

        lMin, lMax, lSum := dfs(node.Left) // 递归左子树
        rMin, rMax, rSum := dfs(node.Right) // 递归右子树
        x := node.Val
        if x <= lMax || x >= rMin { // 不是二叉搜索树
            return math.MinInt, math.MaxInt, 0
        }

        s := lSum + rSum + x // 这棵子树的所有节点值之和
        ans = max(ans, s)

        return min(lMin, x), max(rMax, x), s
    }
    dfs(root)
    return
}

func min(a, b int) int { if b < a { return b }; return a }
func max(a, b int) int { if b > a { return b }; return a }
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(n)$，其中 $n$ 为二叉搜索树的节点个数。
- 空间复杂度：$\mathcal{O}(n)$。最坏情况下，二叉搜索树退化成一条链（注意题目没有保证它是**平衡**树），因此递归需要 $\mathcal{O}(n)$ 的栈空间。

#### 练习：二叉搜索树

- [98. 验证二叉搜索树](https://leetcode.cn/problems/validate-binary-search-tree/)
- [230. 二叉搜索树中第 K 小的元素](https://leetcode.cn/problems/kth-smallest-element-in-a-bst/)
- [501. 二叉搜索树中的众数](https://leetcode.cn/problems/find-mode-in-binary-search-tree/)
- [530. 二叉搜索树的最小绝对差](https://leetcode.cn/problems/minimum-absolute-difference-in-bst/)
- [700. 二叉搜索树中的搜索](https://leetcode.cn/problems/search-in-a-binary-search-tree/)

[往期每日一题题解](https://github.com/EndlessCheng/codeforces-go/blob/master/leetcode/SOLUTIONS.md)

---

欢迎关注[biIibiIi@灵茶山艾府](https://space.bilibili.com/206214)，高质量算法教学，持续输出中~
