## 前置知识：动态规划

1. [动态规划入门：从记忆化搜索到递推](https://www.bilibili.com/video/BV1Xj411K7oF/)
2. [双序列动态规划：最长公共子序列](https://www.bilibili.com/video/BV1TM4y1o7ug/)

> APP 用户需要分享到 wx 打开链接。

## 一、初步思路

为了描述方便，下文把 $\textit{str}_1$ 记作 $s$，$\textit{str}_2$ 记作 $t$。

对于 $s=\texttt{abac}$ 和 $t=\texttt{cab}$，考虑从后往前构造答案（最短公共超序列）。想一想，答案的最后一个字母是什么？

要么是 $s$ 的最后一个字母 $\texttt{c}$，要么是 $t$ 的最后一个字母 $\texttt{b}$。其它字母是没有意义的，假设答案为 $\texttt{cabaca}$，最后一个字母是 $\texttt{a}$，你完全可以把 $\texttt{a}$ 去掉，不会影响 $s$ 和 $t$ 作为答案的子序列。

类似 [1143. 最长公共子序列](https://leetcode.cn/problems/longest-common-subsequence/)，分类讨论如下：

- 如果 $s$ 和 $t$ 的最后一个字母不同：
  - 如果答案的最后一个字母为 $s$ 的最后一个字母，那么问题变成构造 $\texttt{aba}$ 和 $\texttt{cab}$ 的答案，记作 $\textit{ans}_1$。
  - 如果答案的最后一个字母为 $t$ 的最后一个字母，那么问题变成构造 $\texttt{abac}$ 和 $\texttt{ca}$ 的答案，记作 $\textit{ans}_2$。
  - 如果 $\textit{ans}_1$ 比 $\textit{ans}_2$ 更短，那么答案就是 $\textit{ans}_1$ 加上 $s$ 的最后一个字母。
  - 否则，答案就是 $\textit{ans}_2$ 加上 $t$ 的最后一个字母。
- 如果 $s$ 和 $t$ 的最后一个字母相同，那么这个字母就是答案的最后一个字母。例如 $s=\texttt{aba}$ 和 $t=\texttt{ca}$，那么答案的最后一个字母为 $\texttt{a}$，问题变成构造 $\texttt{ab}$ 和 $\texttt{c}$ 的答案。
- （边界）如果 $s$ 是空串，则答案为 $t$。
- （边界）如果 $t$ 是空串，则答案为 $s$。

无论如何，我们都得到了一个规模更小的子问题，即构造 $s$ 的某个前缀与 $t$ 的某个前缀的最短公共超序列。由于子问题与原问题是相似的，可以采用递归解决。

* [sol1-Python3]

```py
# 会超时的递归代码
class Solution:
    def shortestCommonSupersequence(self, s: str, t: str) -> str:
        if s == "": return t  # s 是空串，返回剩余的 t
        if t == "": return s  # t 是空串，返回剩余的 s
        if s[-1] == t[-1]:  # 最短公共超序列一定包含 s[-1]
            return self.shortestCommonSupersequence(s[:-1], t[:-1]) + s[-1]
        ans1 = self.shortestCommonSupersequence(s[:-1], t)
        ans2 = self.shortestCommonSupersequence(s, t[:-1])
        if len(ans1) < len(ans2):  # 取 ans1 和 ans2 中更短的组成答案
            return ans1 + s[-1]
        return ans2 + t[-1]
```

* [sol1-Java]

```java
// 会超时的递归代码
class Solution {
    public String shortestCommonSupersequence(String s, String t) {
        if (s.isEmpty()) return t; // s 是空串，返回剩余的 t
        if (t.isEmpty()) return s; // t 是空串，返回剩余的 s
        var s1 = s.substring(0, s.length() - 1);
        var t1 = t.substring(0, t.length() - 1);
        var x = s.charAt(s.length() - 1);
        var y = t.charAt(t.length() - 1);
        if (x == y) // 最短公共超序列一定包含 x
            return shortestCommonSupersequence(s1, t1) + x;
        var ans1 = shortestCommonSupersequence(s1, t);
        var ans2 = shortestCommonSupersequence(s, t1);
        if (ans1.length() < ans2.length()) // 取 ans1 和 ans2 中更短的组成答案
            return ans1 + x;
        return ans2 + y;
    }
}
```

* [sol1-C++]

```cpp
// 会超时的递归代码
class Solution {
public:
    string shortestCommonSupersequence(string &s, string &t) {
        if (s.empty()) return t; // s 是空串，返回剩余的 t
        if (t.empty()) return s; // t 是空串，返回剩余的 s
        auto s1 = s.substr(0, s.length() - 1);
        auto t1 = t.substr(0, t.length() - 1);
        if (s.back() == t.back()) // 最短公共超序列一定包含 s.back()
            return shortestCommonSupersequence(s1, t1) + s.back();
        auto ans1 = shortestCommonSupersequence(s1, t);
        auto ans2 = shortestCommonSupersequence(s, t1);
        if (ans1.length() < ans2.length()) // 取 ans1 和 ans2 中更短的组成答案
            return ans1 + s.back();
        return ans2 + t.back();
    }
};
```

* [sol1-Go]

```go
// 会超时的递归代码
func shortestCommonSupersequence(s, t string) string {
    if s == "" { // s 是空串，返回剩余的 t
        return t
    }
    if t == "" { // t 是空串，返回剩余的 s
        return s
    }
    n, m := len(s), len(t)
    if s[n-1] == t[m-1] { // 最短公共超序列一定包含 s[n-1]
        return shortestCommonSupersequence(s[:n-1], t[:m-1]) + s[n-1:]
    }
    ans1 := shortestCommonSupersequence(s[:n-1], t)
    ans2 := shortestCommonSupersequence(s, t[:m-1])
    if len(ans1) < len(ans2) { // 取 ans1 和 ans2 中更短的组成答案
        return ans1 + s[n-1:]
    }
    return ans2 + t[m-1:]
}
```

### 复杂度分析

- 时间复杂度：$O((n+m)2^{n+m})$，其中 $n$ 为 $s$ 的长度，$m$ 为 $t$ 的长度。可以视作在一棵高度为 $n+m$ 的二叉树上递归，每次递归又需要花费 $O(n+m)$ 的时间拼接字符串，所以时间复杂度为 $O((n+m)2^{n+m})$。
- 空间复杂度：$O(n+m)$。

## 二、记忆化搜索·初步优化

举个例子，对于 $s=\texttt{ab}$ 和 $t=\texttt{cd}$ 来说，「先去掉 $s$ 中的 $\texttt{b}$，再去掉 $t$ 中的 $\texttt{d}$」和「先去掉 $t$ 中的 $\texttt{d}$，再去掉 $s$ 中的 $\texttt{b}$」，都会递归到 $s=\texttt{a}$ 和 $t=\texttt{c}$ 的情况。

一叶知秋，整个递归中有大量重复递归调用（递归入参相同）。由于递归函数没有副作用，同样的入参无论计算多少次，算出来的结果都是一样的，因此可以用**记忆化搜索**来优化：

- 由于 $s$ 和 $t$ 都是字符串，为了减少空间，也为了方便使用数组记录，可以改成下标 $i$ 和 $j$，其中 $i$ 表示 $s$ 的前 $i$ 个字母，$j$ 表示 $t$ 的前 $j$ 个字母。
- 如果一个状态（递归入参）是第一次遇到，那么可以在返回前，把状态及其结果记到一个 $\textit{memo}$ 数组（或哈希表）中。
- 如果一个状态不是第一次遇到，那么直接返回 $\textit{memo}$ 中保存的结果。

* [sol2-Python3]

```py
# 能通过的测试数据更多，但仍然超时（超内存），还需要进一步优化
class Solution:
    def shortestCommonSupersequence(self, s: str, t: str) -> str:
        # dfs(i,j) 返回 s 的前 i 个字母和 t 的前 j 个字母的最短公共超序列
        @cache  # 缓存装饰器，避免重复计算 dfs 的结果
        def dfs(i: int, j: int) -> str:
            if i < 0: return t[:j + 1]  # s 是空串，返回剩余的 t
            if j < 0: return s[:i + 1]  # t 是空串，返回剩余的 s
            if s[i] == t[j]:  # 最短公共超序列一定包含 s[i]
                return dfs(i - 1, j - 1) + s[i]
            ans1 = dfs(i - 1, j)
            ans2 = dfs(i, j - 1)
            if len(ans1) < len(ans2):  # 取 ans1 和 ans2 中更短的组成答案
                return ans1 + s[i]
            return ans2 + t[j]
        return dfs(len(s) - 1, len(t) - 1)
```

* [sol2-Java]

```java
// 能通过的测试数据更多，但超内存了，还需要进一步优化
class Solution {
    private String s, t;
    private String[][] memo;

    public String shortestCommonSupersequence(String str1, String str2) {
        s = str1;
        t = str2;
        memo = new String[s.length()][t.length()];
        return dfs(s.length() - 1, t.length() - 1);
    }

    // dfs(i,j) 返回 s 的前 i 个字母和 t 的前 j 个字母的最短公共超序列
    private String dfs(int i, int j) {
        if (i < 0) return t.substring(0, j + 1); // s 是空串，返回剩余的 t
        if (j < 0) return s.substring(0, i + 1); // t 是空串，返回剩余的 s
        if (memo[i][j] != null) return memo[i][j]; // 避免重复计算 dfs 的结果
        if (s.charAt(i) == t.charAt(j)) // 最短公共超序列一定包含 s[i]
            return memo[i][j] = dfs(i - 1, j - 1) + s.charAt(i);
        var ans1 = dfs(i - 1, j);
        var ans2 = dfs(i, j - 1);
        if (ans1.length() < ans2.length()) // 取 ans1 和 ans2 中更短的组成答案
            return memo[i][j] = ans1 + s.charAt(i);
        return memo[i][j] = ans2 + t.charAt(j);
    }
}
```

* [sol2-C++]

```cpp
// 能通过的测试数据更多，但仍然超时（超内存），还需要进一步优化
class Solution {
public:
    string shortestCommonSupersequence(string &s, string &t) {
        int n = s.length(), m = t.length();
        vector<vector<string>> memo(n, vector<string>(m));
        // dfs(i,j) 返回 s 的前 i 个字母和 t 的前 j 个字母的最短公共超序列
        function<string(int, int)> dfs = [&](int i, int j) -> string {
            if (i < 0) return t.substr(0, j + 1); // s 是空串，返回剩余的 t
            if (j < 0) return s.substr(0, i + 1); // t 是空串，返回剩余的 s
            string &res = memo[i][j];
            if (!res.empty()) return res; // 避免重复计算 dfs 的结果
            if (s[i] == t[j]) // 最短公共超序列一定包含 s[i]
                return res = dfs(i - 1, j - 1) + s[i];
            auto ans1 = dfs(i - 1, j);
            auto ans2 = dfs(i, j - 1);
            if (ans1.length() < ans2.length()) // 取 ans1 和 ans2 中更短的组成答案
                return res = ans1 + s[i];
            return res = ans2 + t[j];
        };
        return dfs(n - 1, m - 1);
    }
};
```

* [sol2-Go]

```go
// 能通过的测试数据更多，但超内存了，还需要进一步优化
func shortestCommonSupersequence(s, t string) string {
    n, m := len(s), len(t)
    memo := make([][]string, n)
    for i := range memo {
        memo[i] = make([]string, m)
    }
    // dfs(i,j) 返回 s 的前 i 个字母和 t 的前 j 个字母的最短公共超序列
    var dfs func(int, int) string
    dfs = func(i, j int) string {
        if i < 0 { // s 是空串，返回剩余的 t
            return t[:j+1]
        }
        if j < 0 { // t 是空串，返回剩余的 s
            return s[:i+1]
        }
        p := &memo[i][j]
        if *p != "" {
            return *p // 避免重复计算 dfs 的结果
        }
        if s[i] == t[j] { // 最短公共超序列一定包含 s[i]
            *p = dfs(i-1, j-1) + string(s[i])
        } else {
            ans1 := dfs(i-1, j)
            ans2 := dfs(i, j-1)
            if len(ans1) < len(ans2) { // 取 ans1 和 ans2 中更短的组成答案
                *p = ans1 + string(s[i])
            } else {
                *p = ans2 + string(t[j])
            }
        }
        return *p
    }
    return dfs(n-1, m-1)
}
```

### 复杂度分析

- 时间复杂度：$O(nm(n+m))$，其中 $n$ 为 $s$ 的长度，$m$ 为 $t$ 的长度。由于每个状态只会计算一次，因此动态规划的时间复杂度 $=$ 状态个数 $\times$ 单个状态的计算时间。本题的状态个数为 $O(nm)$，单个状态的计算时间为 $O(n+m)$（拼接字符串），因此时间复杂度为 $O(nm(n+m))$。
- 空间复杂度：$O(nm(n+m))$。一共有 $O(nm)$ 个状态，再算上返回值需要 $O(n+m)$ 的空间，所以需要 $O(nm(n+m))$ 的空间实现记忆化。

## 三、记忆化搜索·进一步优化

如果只求最短公共超序列的**长度**，那么递归返回的是一个**整数**而不是字符串，这样就只需要 $O(nm)$ 的时间和空间，这是可以接受的。问题在于，我们需要构造一个具体的最短公共超序列。

假设 $\textit{dfs}$ 返回的就是最短公共超序列的**长度**，我们再回过头来看「初步思路」中的分类讨论：

- 如果 $s[i]\ne t[j]$：
  - 如果 $\textit{dfs}(i,j) = \textit{dfs}(i-1,j)+1$，说明 $\textit{dfs}(i-1,j)\le \textit{dfs}(i,j-1)$，答案可以在 $\textit{dfs}(i-1,j)$ 对应的最短公共超序列的末尾加上 $s[i]$。
  - 否则（$\textit{dfs}(i,j) = \textit{dfs}(i,j-1)+1$），说明 $\textit{dfs}(i-1,j)> \textit{dfs}(i,j-1)$，答案可以在 $\textit{dfs}(i,j-1)$ 对应的最短公共超序列的末尾加上 $t[j]$。
- 如果 $s[i]=t[j]$，那么答案就是在 $\textit{dfs}(i-1,j-1)$ 对应的最短公共超序列的末尾加上 $s[i]$。

因此可以写一个类似 $\textit{dfs}$ 的递归函数 $\textit{makeAns}(i,j)$，通过比较 $\textit{dfs}(i,j)$ 与 $\textit{dfs}(i-1,j)$，**递归构造**出具体的答案。具体见代码中的注释。

### 答疑

**问**：如何理解递归套递归的代码？怎么保证这样写出来的代码是正确的呢？

**答**：见[【基础算法精讲 09】](https://www.bilibili.com/video/BV1UD4y1Y769/)，你只需要关注递归边界，以及怎么由子问题计算出原问题。**数学归纳法**可以帮你保证代码的正确性。

* [sol3-Python3]

```py
class Solution:
    def shortestCommonSupersequence(self, s: str, t: str) -> str:
        # dfs(i,j) 返回 s 的前 i 个字母和 t 的前 j 个字母的最短公共超序列的长度
        @cache  # 缓存装饰器，避免重复计算 dfs 的结果
        def dfs(i: int, j: int) -> int:
            if i < 0: return j + 1  # s 是空串，返回剩余的 t 的长度
            if j < 0: return i + 1  # t 是空串，返回剩余的 s 的长度
            if s[i] == t[j]:  # 最短公共超序列一定包含 s[i]
                return dfs(i - 1, j - 1) + 1
            return min(dfs(i - 1, j), dfs(i, j - 1)) + 1

        # make_ans(i,j) 返回 s 的前 i 个字母和 t 的前 j 个字母的最短公共超序列
        # 看上去和 dfs 没啥区别，但是末尾的递归是 if-else
        # make_ans(i-1,j) 和 make_ans(i,j-1) 不会都调用
        # 所以 make_ans 的递归树仅仅是一条链
        def make_ans(i: int, j: int) -> str:
            if i < 0: return t[:j + 1]  # s 是空串，返回剩余的 t
            if j < 0: return s[:i + 1]  # t 是空串，返回剩余的 s
            if s[i] == t[j]:  # 公共超序列一定包含 s[i]
                return make_ans(i - 1, j - 1) + s[i]
            # 如果下面 if 成立，说明上面 dfs 中的 min 取的是 dfs(i - 1, j)
            # 说明 dfs(i - 1, j) 对应的公共超序列更短
            # 那么就在 make_ans(i - 1, j) 的结果后面加上 s[i]
            # 否则说明 dfs(i, j - 1) 对应的公共超序列更短
            # 那么就在 make_ans(i, j - 1) 的结果后面加上 t[j]
            if dfs(i, j) == dfs(i - 1, j) + 1:
                return make_ans(i - 1, j) + s[i]
            return make_ans(i, j - 1) + t[j]

        return make_ans(len(s) - 1, len(t) - 1)
```

* [sol3-Java]

```java
class Solution {
    private String s, t;
    private int[][] memo;

    public String shortestCommonSupersequence(String str1, String str2) {
        s = str1;
        t = str2;
        memo = new int[s.length()][t.length()];
        return makeAns(s.length() - 1, t.length() - 1);
    }

    // dfs(i,j) 返回 s 的前 i 个字母和 t 的前 j 个字母的最短公共超序列的长度
    private int dfs(int i, int j) {
        if (i < 0) return j + 1; // s 是空串，返回剩余的 t 的长度
        if (j < 0) return i + 1; // t 是空串，返回剩余的 s 的长度
        if (memo[i][j] > 0) return memo[i][j]; // 避免重复计算 dfs 的结果
        if (s.charAt(i) == t.charAt(j)) // 最短公共超序列一定包含 s[i]
            return memo[i][j] = dfs(i - 1, j - 1) + 1;
        return memo[i][j] = Math.min(dfs(i - 1, j), dfs(i, j - 1)) + 1;
    }

    // makeAns(i,j) 返回 s 的前 i 个字母和 t 的前 j 个字母的最短公共超序列
    // 看上去和 dfs 没啥区别，但是末尾的递归是 if-else
    // makeAns(i-1,j) 和 makeAns(i,j-1) 不会都调用
    // 所以 makeAns 的递归树仅仅是一条链
    private String makeAns(int i, int j) {
        if (i < 0) return t.substring(0, j + 1); // s 是空串，返回剩余的 t
        if (j < 0) return s.substring(0, i + 1); // t 是空串，返回剩余的 s
        if (s.charAt(i) == t.charAt(j)) // 最短公共超序列一定包含 s[i]
            return makeAns(i - 1, j - 1) + s.charAt(i);
        // 如果下面 if 成立，说明上面 dfs 中的 min 取的是 dfs(i - 1, j)
        // 说明 dfs(i - 1, j) 对应的公共超序列更短
        // 那么就在 makeAns(i - 1, j) 的结果后面加上 s[i]
        // 否则说明 dfs(i, j - 1) 对应的公共超序列更短
        // 那么就在 makeAns(i, j - 1) 的结果后面加上 t[j]
        if (dfs(i, j) == dfs(i - 1, j) + 1)
            return makeAns(i - 1, j) + s.charAt(i);
        return makeAns(i, j - 1) + t.charAt(j);
    }
}
```

* [sol3-C++]

```cpp
class Solution {
public:
    string shortestCommonSupersequence(string &s, string &t) {
        int n = s.length(), m = t.length();
        vector<vector<int>> memo(n, vector<int>(m, -1));
        // dfs(i,j) 返回 s 的前 i 个字母和 t 的前 j 个字母的最短公共超序列的长度
        function<int(int, int)> dfs = [&](int i, int j) -> int {
            if (i < 0) return j + 1; // s 是空串，返回剩余的 t 的长度
            if (j < 0) return i + 1; // t 是空串，返回剩余的 s 的长度
            int &res = memo[i][j];
            if (res != -1) return res; // 避免重复计算 dfs 的结果
            if (s[i] == t[j]) // 最短公共超序列一定包含 s[i]
                return res = dfs(i - 1, j - 1) + 1;
            return res = min(dfs(i - 1, j), dfs(i, j - 1)) + 1;
        };

        // make_ans(i,j) 返回 s 的前 i 个字母和 t 的前 j 个字母的最短公共超序列
        // 看上去和 dfs 没啥区别，但是末尾的递归是 if-else
        // make_ans(i-1,j) 和 make_ans(i,j-1) 不会都调用
        // 所以 make_ans 的递归树仅仅是一条链
        function<string(int, int)> make_ans = [&](int i, int j) -> string {
            if (i < 0) return t.substr(0, j + 1); // s 是空串，返回剩余的 t
            if (j < 0) return s.substr(0, i + 1); // t 是空串，返回剩余的 s
            if (s[i] == t[j]) // 最短公共超序列一定包含 s[i]
                return make_ans(i - 1, j - 1) + s[i];
            // 如果下面 if 成立，说明上面 dfs 中的 min 取的是 dfs(i - 1, j)
            // 说明 dfs(i - 1, j) 对应的公共超序列更短
            // 那么就在 make_ans(i - 1, j) 的结果后面加上 s[i]
            // 否则说明 dfs(i, j - 1) 对应的公共超序列更短
            // 那么就在 make_ans(i, j - 1) 的结果后面加上 t[j]
            if (dfs(i, j) == dfs(i - 1, j) + 1)
                return make_ans(i - 1, j) + s[i];
            return make_ans(i, j - 1) + t[j];
        };

        return make_ans(n - 1, m - 1);
    }
};
```

* [sol3-Go]

```go
func shortestCommonSupersequence(s, t string) string {
    n, m := len(s), len(t)
    memo := make([][]int, n)
    for i := range memo {
        memo[i] = make([]int, m)
    }
    // dfs(i,j) 返回 s 的前 i 个字母和 t 的前 j 个字母的最短公共超序列的长度
    var dfs func(int, int) int
    dfs = func(i, j int) int {
        if i < 0 { // s 是空串，返回剩余的 t 的长度
            return j + 1
        }
        if j < 0 { // t 是空串，返回剩余的 s 的长度
            return i + 1
        }
        p := &memo[i][j]
        if *p > 0 {
            return *p // 避免重复计算 dfs 的结果
        }
        if s[i] == t[j] { // 最短公共超序列一定包含 s[i]
            *p = dfs(i-1, j-1) + 1
        } else {
            *p = min(dfs(i-1, j), dfs(i, j-1)) + 1
        }
        return *p
    }

    // makeAns(i,j) 返回 s 的前 i 个字母和 t 的前 j 个字母的最短公共超序列
    // 看上去和 dfs 没啥区别，但是末尾的递归是 if-else
    // makeAns(i-1,j) 和 makeAns(i,j-1) 不会都调用
    // 所以 makeAns 的递归树仅仅是一条链
    var makeAns func(int, int) string
    makeAns = func(i, j int) string {
        if i < 0 { // s 是空串，返回剩余的 t
            return t[:j+1]
        }
        if j < 0 { // t 是空串，返回剩余的 s
            return s[:i+1]
        }
        if s[i] == t[j] { // 最短公共超序列一定包含 s[i]
            return makeAns(i-1, j-1) + string(s[i])
        }
        // 如果下面 if 成立，说明上面 dfs 中的 min 取的是 dfs(i - 1, j)
        // 说明 dfs(i - 1, j) 对应的公共超序列更短
        // 那么就在 makeAns(i - 1, j) 的结果后面加上 s[i]
        // 否则说明 dfs(i, j - 1) 对应的公共超序列更短
        // 那么就在 makeAns(i, j - 1) 的结果后面加上 t[j]
        if dfs(i, j) == dfs(i-1, j)+1 {
            return makeAns(i-1, j) + string(s[i])
        }
        return makeAns(i, j-1) + string(t[j])
    }

    return makeAns(n-1, m-1)
}

func min(a, b int) int { if b < a { return b }; return a }
```

### 复杂度分析

- 时间复杂度：$O(nm)$，其中 $n$ 为 $s$ 的长度，$m$ 为 $t$ 的长度。由于每个状态只会计算一次，因此动态规划的时间复杂度 $=$ 状态个数 $\times$ 单个状态的计算时间。本题的状态个数为 $O(nm)$，单个状态的计算时间为 $O(1)$，因此记忆化搜索的时间复杂度为 $O(nm)$。构造答案的部分，递归 $O(n+m)$ 次（注意 $\textit{makeAns}$ 的递归树仅仅是**一条链**），每次拼接字符串，不同语言的实现不同，如果直接加在字符串末尾就是 $O(1)$，如果生成新的字符串就是 $O(n+m)$，所以构造答案这部分需要 $O(n+m)$ 或 $O((n+m)^2)$ 的时间，这会在下面的代码中进一步优化成 $O(n+m)$。
- 空间复杂度：$O(nm)$。一共有 $O(nm)$ 个状态，需要 $O(nm)$ 的空间实现记忆化。

## 四、递推 + 迭代

### 1. 把记忆化搜索改成递推

对于记忆化搜索，我们可以去掉递归中的「递」，只保留「归」的部分，即自底向上计算。

做法：

- $\textit{dfs}$ 改成 $f$ 数组；
- 递归改成循环（每个参数都对应一层循环）；
- 递归边界改成 $f$ 数组的初始值。

具体来说，$f[i][j]$ 的含义和 $\textit{dfs}(i,j)$ 的含义是**完全一致**的，都表示 $s$ 的前 $i$ 个字母和 $t$ 的前 $j$ 个字母的最短公共超序列的长度。

相应的递推式（状态转移方程）也和 $\textit{dfs}$ 的完全一致：

$$
f[i][j] =
\begin{cases}
f[i-1][j-1]+1,&s[i]= t[j]\\
\min(f[i-1][j] , f[i][j-1]) + 1,&s[i]\ne t[j]
\end{cases}
$$

但当 $i=0$ 或 $j=0$ 时，等号右边会出现负数下标。或者说，**这种定义方式没有状态能表示递归边界**，即 $s$ 或 $t$ 是空字符串的情况。

解决办法：在 $f$ 数组的上边和左边各加一排，把原来的 $f[i]$ 改成 $f[i+1]$，$f[i-1]$ 改成 $f[i]$，$j$ 也同理。

修改后 $f[i+1][j+1]$ 表示 $s$ 的前 $i$ 个字母和 $t$ 的前 $j$ 个字母的最短公共超序列的长度。此时 $f[i][0]$ 和 $f[0][j]$ 就对应递归边界了。

修改后的递推式为

$$
f[i+1][j+1] =
\begin{cases}
f[i][j]+1,&s[i]= t[j]\\
\min(f[i][j+1] , f[i+1][j]) + 1,&s[i]\ne t[j]
\end{cases}
$$

初始值 $f[i][0]=i$，$f[0][j]=j$。

### 2. 迭代构造答案

对于 $\textit{makeAns}$，改成先把字母添加到 $\textit{ans}$ 中，然后再递归。这样修改后，递归调用都发生在函数的末尾，可以改成循环，只需要把相应的 $i,j$ 减一即可，具体见代码。

由于我们是从后往前构造最短公共超序列，序列末尾的字符会在 $\textit{ans}$ 的开头，所以最后要反转一下再返回。

> 注：由于 $\textit{ans}$ 的长度就是 $f[n][m]$，也可以初始化一个长度固定为 $f[n][m]$ 的 $\textit{ans}$，从后往前添加字母，这样无需反转。

* [sol4-Python3]

```py
class Solution:
    def shortestCommonSupersequence(self, s: str, t: str) -> str:
        n, m = len(s), len(t)
        # f[i+1][j+1] 表示 s 的前 i 个字母和 t 的前 j 个字母的最短公共超序列的长度
        f = [[0] * (m + 1) for _ in range(n + 1)]
        f[0] = list(range(m + 1))  # 递归边界 f[0][j] = j
        for i in range(1, n + 1):
            f[i][0] = i  # 递归边界
        for i, x in enumerate(s):
            for j, y in enumerate(t):
                if x == y:  # 最短公共超序列一定包含 s[i]
                    f[i + 1][j + 1] = f[i][j] + 1
                else:  # 取更短的组成答案
                    f[i + 1][j + 1] = min(f[i][j + 1], f[i + 1][j]) + 1

        ans = []
        i, j = n - 1, m - 1
        while i >= 0 and j >= 0:
            if s[i] == t[j]:  # 公共超序列一定包含 s[i]
                ans.append(s[i])
                i -= 1
                j -= 1  # 相当于继续递归 make_ans(i - 1, j - 1)
            elif f[i + 1][j + 1] == f[i][j + 1] + 1:
                ans.append(s[i])
                i -= 1  # 相当于继续递归 make_ans(i - 1, j)
            else:
                ans.append(t[j])
                j -= 1  # 相当于继续递归 make_ans(i, j - 1)

        # 补上前面的递归边界
        # reversed(ans) 也可以写成 ans[::-1]
        return s[:i + 1] + t[:j + 1] + ''.join(reversed(ans))
```

* [sol4-Java]

```java
class Solution {
    public String shortestCommonSupersequence(String str1, String str2) {
        // f[i+1][j+1] 表示 s 的前 i 个字母和 t 的前 j 个字母的最短公共超序列的长度
        char[] s = str1.toCharArray(), t = str2.toCharArray();
        int n = s.length, m = t.length;
        var f = new int[n + 1][m + 1];
        for (int j = 1; j < m; ++j) f[0][j] = j; // 递归边界
        for (int i = 1; i < n; ++i) f[i][0] = i; // 递归边界
        for (int i = 0; i < n; ++i)
            for (int j = 0; j < m; ++j)
                if (s[i] == t[j]) // 最短公共超序列一定包含 s[i]
                    f[i + 1][j + 1] = f[i][j] + 1;
                else // 取更短的组成答案
                    f[i + 1][j + 1] = Math.min(f[i][j + 1], f[i + 1][j]) + 1;

        int na = f[n][m];
        var ans = new char[na];
        for (int i = n - 1, j = m - 1, k = na - 1; ; ) {
            if (i < 0) { // s 是空串，剩余的 t 就是最短公共超序列
                System.arraycopy(t, 0, ans, 0, j + 1);
                break; // 相当于递归边界
            }
            if (j < 0) { // t 是空串，剩余的 s 就是最短公共超序列
                System.arraycopy(s, 0, ans, 0, i + 1);
                break; // 相当于递归边界
            }
            if (s[i] == t[j]) { // 公共超序列一定包含 s[i]
                ans[k--] = s[i--]; // 倒着填 ans
                --j; // 相当于继续递归 makeAns(i - 1, j - 1)
            } else if (f[i + 1][j + 1] == f[i][j + 1] + 1)
                ans[k--] += s[i--]; // 相当于继续递归 makeAns(i - 1, j)
            else
                ans[k--] += t[j--]; // 相当于继续递归 makeAns(i, j - 1)
        }
        return new String(ans);
    }
}
```

* [sol4-C++]

```cpp
class Solution {
public:
    string shortestCommonSupersequence(string &s, string &t) {
        // f[i+1][j+1] 表示 s 的前 i 个字母和 t 的前 j 个字母的最短公共超序列的长度
        int n = s.length(), m = t.length(), f[n + 1][m + 1];
        for (int j = 0; j < m; ++j) f[0][j] = j; // 递归边界
        for (int i = 1; i < n; ++i) f[i][0] = i; // 递归边界
        for (int i = 0; i < n; ++i)
            for (int j = 0; j < m; ++j)
                if (s[i] == t[j]) // 最短公共超序列一定包含 s[i]
                    f[i + 1][j + 1] = f[i][j] + 1;
                else // 取更短的组成答案
                    f[i + 1][j + 1] = min(f[i][j + 1], f[i + 1][j]) + 1;

        string ans;
        int i = n - 1, j = m - 1;
        while (i >= 0 && j >= 0) {
            if (s[i] == t[j]) { // 公共超序列一定包含 s[i]
                ans += s[i];
                --i;
                --j; // 相当于继续递归 make_ans(i - 1, j - 1)
            } else if (f[i + 1][j + 1] == f[i][j + 1] + 1)
                ans += s[i--]; // 相当于继续递归 make_ans(i - 1, j)
            else
                ans += t[j--]; // 相当于继续递归 make_ans(i, j - 1)
        }
        reverse(ans.begin(), ans.end());
        // 补上前面的递归边界
        return s.substr(0, i + 1) + t.substr(0, j + 1) + ans;
    }
};
```

* [sol4-Go]

```go
func shortestCommonSupersequence(s, t string) string {
    n, m := len(s), len(t)
    // f[i+1][j+1] 表示 s 的前 i 个字母和 t 的前 j 个字母的最短公共超序列的长度
    f := make([][]int, n+1)
    for i := range f {
        f[i] = make([]int, m+1)
    }
    for j := 1; j < m; j++ {
        f[0][j] = j // 递归边界
    }
    for i := 1; i < n; i++ {
        f[i][0] = i // 递归边界
    }
    for i := 0; i < n; i++ {
        for j := 0; j < m; j++ {
            if s[i] == t[j] { // 最短公共超序列一定包含 s[i]
                f[i+1][j+1] = f[i][j] + 1
            } else { // 取更短的组成答案
                f[i+1][j+1] = min(f[i][j+1], f[i+1][j]) + 1
            }
        }
    }

    ans := []byte{}
    i, j := n-1, m-1
    for i >= 0 && j >= 0 {
        if s[i] == t[j] { // 公共超序列一定包含 s[i]
            ans = append(ans, s[i])
            i--
            j-- // 相当于继续递归 makeAns(i - 1, j - 1)
        } else if f[i+1][j+1] == f[i][j+1]+1 {
            ans = append(ans, s[i])
            i-- // 相当于继续递归 makeAns(i - 1, j)
        } else {
            ans = append(ans, t[j])
            j-- // 相当于继续递归 makeAns(i, j - 1)
        }
    }
    for i, n := 0, len(ans); i < n/2; i++ {
        ans[i], ans[n-1-i] = ans[n-1-i], ans[i]
    }
    // 补上前面的递归边界
    return s[:i+1] + t[:j+1] + string(ans)
}

func min(a, b int) int { if b < a { return b }; return a }
```

### 复杂度分析

- 时间复杂度：$O(nm)$，其中 $n$ 为 $s$ 的长度，$m$ 为 $t$ 的长度。
- 空间复杂度：$O(nm)$。

---

欢迎关注[【biIibiIi@灵茶山艾府】](https://space.bilibili.com/206214)，高质量算法教学，持续更新中~

附：[每日一题·高质量题解精选](https://github.com/EndlessCheng/codeforces-go/blob/master/leetcode/SOLUTIONS.md)。
